{"version":3,"sources":["../../../app/service/question.js"],"names":["module","exports","app","model","Question","User","Tag","PAGE_SIZE","QuestionService","title","content","tagName","images","user","ctx","desc","length","slice","findOne","tag","userId","_id","nickName","headImage","location","save","question","findByIdAndUpdate","$inc","questionCount","Error","questionId","remove","res","result","n","findById","count","answerCount","$push","answers","certification","id","answerId","update","$pull","nModified","attentions","attentionCount","find","experts","last","time","$lt","sort","limit","exec","Service"],"mappings":"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","file":"question.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const {\n    Question,\n    User,\n    Tag,\n  } = app.model;\n  const PAGE_SIZE = 30;\n  class QuestionService extends app.Service {\n\n    /**\n     * 新建问题\n     * @param {String} title 标题\n     * @param {String} content 内容\n     * @param {String} tagName 分类标签名\n     * @param {String} images 图片地址\n     * @return {*} 问题详情数据\n     */\n    async addQuestion(title, content, tagName, images) {\n      const user = this.ctx.user;\n      try {\n        let desc;\n        if (content.length > 30) {\n          desc = content.slice(0, 30);\n        } else {\n          desc = content;\n        }\n        const tag = await Tag.findOne({\n          tagName,\n        });\n        const question = await new Question({\n          title,\n          content,\n          tag,\n          images,\n          desc,\n          userId: user._id,\n          nickName: user.nickName,\n          headImage: user.headImage,\n          location: user.location,\n        }).save();\n        await User.findByIdAndUpdate(user._id, {\n          $inc: {\n            questionCount: 1,\n          },\n        });\n        return {\n          question,\n        };\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 删除问题\n     * @param {String} questionId 问题id\n     * @return {*} 成功状态\n     */\n    async deleteQuestion(questionId) {\n      try {\n        const res = await Question.remove({\n          _id: questionId,\n          userId: this.ctx.user._id,\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $inc: {\n            questionCount: -1,\n          },\n        });\n        if (res.result.n !== 1) {\n          throw new Error();\n        }\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 添加回答\n     * @param {String} questionId 问题id\n     * @param {String} content 内容\n     * @param {String} images 图片地址\n     * @return {*} 回答\n     */\n    async addAnswer(questionId, content, images) {\n      const user = this.ctx.user;\n      try {\n        const question = await Question.findById(questionId);\n        await Question.findByIdAndUpdate(questionId, {\n          $inc: {\n            count: 1,\n            answerCount: 1,\n          },\n          $push: {\n            answers: {\n              _id: question.count + 1,\n              content,\n              userId: user._id,\n              nickName: user.nickName,\n              headImage: user.headImage,\n              certification: user.certification,\n              images,\n            },\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $push: {\n            answers: questionId,\n          },\n          $inc: {\n            answerCount: 1,\n          },\n        });\n        const result = await Question.findById(questionId, 'answers');\n        return result.answers.id(question.count + 1);\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 删除回答\n     * @param {String} questionId 问题id\n     * @param {Number} answerId 回答id\n     * @return {*} 成功状态\n     */\n    async deleteAnswer(questionId, answerId) {\n      try {\n        const res = await Question.update({\n          _id: questionId,\n        }, {\n          $inc: {\n            answerCount: -1,\n          },\n          $pull: {\n            answers: {\n              _id: answerId,\n            },\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $inc: {\n            answerCount: -1,\n          },\n        });\n        if (res.nModified !== 1) {\n          throw new Error();\n        }\n        return 'success';\n      } catch (e) {\n        throw new Error('DELETE_ERROR');\n      }\n    }\n\n    /**\n     * 关注问题\n     * @param {String} questionId 问题id\n     * @return {*} 成功状态\n     */\n    async attentionQuestion(questionId) {\n      try {\n        await Question.findByIdAndUpdate(questionId, {\n          $push: {\n            attentions: this.ctx.user._id,\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $push: {\n            attentions: questionId,\n          },\n          $inc: {\n            attentionCount: 1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 取消关注问题\n     * @param {String} questionId 问题id\n     * @return {*} 成功状态\n     */\n    async removeAttentionQuestion(questionId) {\n      try {\n        await Question.findByIdAndUpdate(questionId, {\n          $pull: {\n            attentions: this.ctx.user._id,\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $pull: {\n            attentions: questionId,\n          },\n          $inc: {\n            attentionCount: -1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取专家列表\n     * @param {String} tag 标签\n     * @return {*} 专家列表\n     */\n    async getExpertList(tag) {\n      try {\n        const experts = await User.find({\n          certification: tag,\n        }, '_id nickName headImage description certification');\n        return experts;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 分类获取问题列表\n     * @param {String} tag 标签\n     * @param {String} last 最后时间\n     * @return {*} 问题列表\n     */\n    async getQuestionList(tag, last) {\n      try {\n        const res = await Question.find({\n          'tag.tagId': tag,\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time userId').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取全部问题列表\n     * @param {String} last 最后时间\n     * @return {*} 问题列表\n     */\n    async getAllQuestionList(last) {\n      try {\n        const res = await Question.find({\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time userId').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取问题详情\n     * @param {String} id 问题id\n     * @return {*} 问题列表\n     */\n    async getQuestion(id) {\n      try {\n        const res = await Question.findById(id);\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取问题标签\n     * @return {*} 问题标签\n     */\n    async getTags() {\n      try {\n        const res = await Tag.find({});\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n  }\n  return QuestionService;\n};\n"]}