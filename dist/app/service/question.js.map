{"version":3,"sources":["../../../app/service/question.js"],"names":["module","exports","app","model","Question","User","Tag","PAGE_SIZE","QuestionService","title","content","tagName","images","user","ctx","desc","length","slice","findOne","tag","console","log","userId","_id","nickName","headImage","location","save","question","findByIdAndUpdate","$inc","questionCount","Error","questionId","remove","res","result","n","findById","count","answerCount","$push","answers","certification","id","answerId","update","$pull","nModified","$set","last","find","time","$lt","sort","limit","exec","Service"],"mappings":"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","file":"question.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const {\n    Question,\n    User,\n    Tag,\n  } = app.model;\n  const PAGE_SIZE = 30;\n  class QuestionService extends app.Service {\n\n    /**\n     * 新建问题\n     * @param {String} title 标题\n     * @param {String} content 内容\n     * @param {String} tagName 分类标签名\n     * @param {String} images 图片地址\n     * @return {*} 问题详情数据\n     */\n    async addQuestion(title, content, tagName, images) {\n      const user = this.ctx.user;\n      try {\n        let desc;\n        if (content.length > 30) {\n          desc = content.slice(0, 30);\n        } else {\n          desc = content;\n        }\n        const tag = await Tag.findOne({\n          tagName,\n        });\n        console.log(tag);\n        const question = await new Question({\n          title,\n          content,\n          tag,\n          images,\n          desc,\n          userId: user._id,\n          nickName: user.nickName,\n          headImage: user.headImage,\n          location: user.location,\n        }).save();\n        await User.findByIdAndUpdate(user._id, {\n          $inc: {\n            questionCount: 1,\n          },\n        });\n        return {\n          question,\n        };\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 删除问题\n     * @param {String} questionId 问题id\n     * @return {*} 成功状态\n     */\n    async deleteQuestion(questionId) {\n      try {\n        const res = await Question.remove({\n          _id: questionId,\n          userId: this.ctx.user._id,\n        });\n        if (res.result.n !== 1) {\n          throw new Error();\n        }\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 添加回答\n     * @param {String} questionId 问题id\n     * @param {String} content 内容\n     * @param {String} images 图片地址\n     * @return {*} 回答\n     */\n    async addAnswer(questionId, content, images) {\n      const user = this.ctx.user;\n      try {\n        const question = await Question.findById(questionId);\n        await Question.findByIdAndUpdate(questionId, {\n          $inc: {\n            count: 1,\n            answerCount: 1,\n          },\n          $push: {\n            answers: {\n              _id: question.count + 1,\n              content,\n              userId: user._id,\n              nickName: user.nickName,\n              headImage: user.headImage,\n              certification: user.certification,\n              images,\n            },\n          },\n        });\n        const result = await Question.findById(questionId, 'answers');\n        return result.answers.id(question.count + 1);\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 删除回答\n     * @param {String} questionId 问题id\n     * @param {Number} answerId 回答id\n     * @return {*} 成功状态\n     */\n    async deleteAnswer(questionId, answerId) {\n      try {\n        const res = await Question.update({\n          _id: questionId,\n        }, {\n          $inc: {\n            answerCount: -1,\n          },\n          $pull: {\n            answers: {\n              _id: answerId,\n            },\n          },\n        });\n        if (res.nModified !== 1) {\n          throw new Error();\n        }\n        return 'success';\n      } catch (e) {\n        throw new Error('DELETE_ERROR');\n      }\n    }\n\n    /**\n     * 采纳答案\n     * @param {String} questionId 问题id\n     * @param {Number} answerId 回答id\n     * @return {*} 成功状态\n     */\n    async acceptAnswer(questionId, answerId) {\n      try {\n        const res = await Question.update({\n          _id: questionId,\n          'answers._id': answerId,\n        }, {\n          $set: {\n            'answers.$._id': 0,\n          },\n        });\n        if (res.nModified !== 1) {\n          throw new Error();\n        }\n        console.log(res);\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async getExpertList() {\n      //\n    }\n\n    /**\n     * 分类获取问题列表\n     * @param {String} tag 标签\n     * @param {String} last 最后时间\n     * @return {*} 问题列表\n     */\n    async getQuestionList(tag, last) {\n      try {\n        const res = await Question.find({\n          'tag.tagId': tag,\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取全部问题列表\n     * @param {String} last 最后时间\n     * @return {*} 问题列表\n     */\n    async getAllQuestionList(last) {\n      try {\n        const res = await Question.find({\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取问题详情\n     * @param {String} id 问题id\n     * @return {*} 问题列表\n     */\n    async getQuestion(id) {\n      try {\n        const res = await Question.findById(id);\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取问题标签\n     * @return {*} 问题标签\n     */\n    async getTags() {\n      try {\n        const res = await Tag.find({});\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n  }\n  return QuestionService;\n};\n"]}