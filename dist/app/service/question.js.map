{"version":3,"sources":["../../../app/service/question.js"],"names":["module","exports","app","model","Question","User","Tag","Chat","PAGE_SIZE","QuestionService","title","content","tagName","images","user","ctx","desc","length","slice","findOne","tag","tagId","_id","userId","nickName","headImage","location","save","question","findByIdAndUpdate","$inc","questionCount","Error","questionId","remove","res","result","n","findById","count","answerCount","$push","answers","certification","id","answerId","update","$pull","nModified","attentions","attentionCount","find","experts","last","time","$lt","sort","limit","exec","tags","chatId","messages","reverse","Service"],"mappings":"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","file":"question.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const {\n    Question,\n    User,\n    Tag,\n    Chat,\n  } = app.model;\n  const PAGE_SIZE = 30;\n  class QuestionService extends app.Service {\n\n    /**\n     * 新建问题\n     * @param {String} title 标题\n     * @param {String} content 内容\n     * @param {String} tagName 分类标签名\n     * @param {String} images 图片地址\n     * @return {*} 问题详情数据\n     */\n    async addQuestion(title, content, tagName, images) {\n      const user = this.ctx.user;\n      try {\n        let desc;\n        if (content.length > 30) {\n          desc = content.slice(0, 30);\n        } else {\n          desc = content;\n        }\n        const tag = await Tag.findOne({\n          tagName,\n        });\n        const question = await new Question({\n          title,\n          content,\n          tag: {\n            tagName: tag.tagName,\n            tagId: tag._id,\n          },\n          images,\n          desc,\n          userId: user._id,\n          nickName: user.nickName,\n          headImage: user.headImage,\n          location: user.location,\n        }).save();\n        await User.findByIdAndUpdate(user._id, {\n          $inc: {\n            questionCount: 1,\n          },\n        });\n        return {\n          question,\n        };\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 删除问题\n     * @param {String} questionId 问题id\n     * @return {*} 成功状态\n     */\n    async deleteQuestion(questionId) {\n      try {\n        const res = await Question.remove({\n          _id: questionId,\n          userId: this.ctx.user._id,\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $inc: {\n            questionCount: -1,\n          },\n        });\n        if (res.result.n !== 1) {\n          throw new Error();\n        }\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 添加回答\n     * @param {String} questionId 问题id\n     * @param {String} content 内容\n     * @param {String} images 图片地址\n     * @return {*} 回答\n     */\n    async addAnswer(questionId, content, images) {\n      const user = this.ctx.user;\n      try {\n        const question = await Question.findById(questionId);\n        await Question.findByIdAndUpdate(questionId, {\n          $inc: {\n            count: 1,\n            answerCount: 1,\n          },\n          $push: {\n            answers: {\n              _id: question.count + 1,\n              content,\n              userId: user._id,\n              nickName: user.nickName,\n              headImage: user.headImage,\n              certification: user.certification,\n              images,\n            },\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $push: {\n            answers: questionId,\n          },\n          $inc: {\n            answerCount: 1,\n          },\n        });\n        const result = await Question.findById(questionId, 'answers');\n        return result.answers.id(question.count + 1);\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 删除回答\n     * @param {String} questionId 问题id\n     * @param {Number} answerId 回答id\n     * @return {*} 成功状态\n     */\n    async deleteAnswer(questionId, answerId) {\n      try {\n        const res = await Question.update({\n          _id: questionId,\n        }, {\n          $inc: {\n            answerCount: -1,\n          },\n          $pull: {\n            answers: {\n              _id: answerId,\n            },\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $inc: {\n            answerCount: -1,\n          },\n        });\n        if (res.nModified !== 1) {\n          throw new Error();\n        }\n        return 'success';\n      } catch (e) {\n        throw new Error('DELETE_ERROR');\n      }\n    }\n\n    /**\n     * 关注问题\n     * @param {String} questionId 问题id\n     * @return {*} 成功状态\n     */\n    async attentionQuestion(questionId) {\n      try {\n        await Question.findByIdAndUpdate(questionId, {\n          $push: {\n            attentions: this.ctx.user._id,\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $push: {\n            attentions: questionId,\n          },\n          $inc: {\n            attentionCount: 1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 取消关注问题\n     * @param {String} questionId 问题id\n     * @return {*} 成功状态\n     */\n    async removeAttentionQuestion(questionId) {\n      try {\n        await Question.findByIdAndUpdate(questionId, {\n          $pull: {\n            attentions: this.ctx.user._id,\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $pull: {\n            attentions: questionId,\n          },\n          $inc: {\n            attentionCount: -1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取专家列表\n     * @param {String} tag 标签\n     * @return {*} 专家列表\n     */\n    async getExpertList(tag) {\n      try {\n        const experts = await User.find({\n          certification: tag,\n        }, '_id nickName headImage description certification');\n        return experts;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 分类获取问题列表\n     * @param {String} tag 标签\n     * @param {String} last 最后时间\n     * @return {*} 问题列表\n     */\n    async getQuestionList(tag, last) {\n      try {\n        const res = await Question.find({\n          'tag.tagId': tag,\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time userId').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取全部问题列表\n     * @param {String} last 最后时间\n     * @return {*} 问题列表\n     */\n    async getAllQuestionList(last) {\n      try {\n        const res = await Question.find({\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time userId').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取问题详情\n     * @param {String} id 问题id\n     * @return {*} 问题列表\n     */\n    async getQuestion(id) {\n      try {\n        const res = await Question.findById(id);\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取问题标签\n     * @return {*} 问题标签\n     */\n    async getTags() {\n      try {\n        const res = await Tag.find({});\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async saveTags(tags) {\n      try {\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          tags,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async getChat(chatId, last) {\n      try {\n        const messages = await Chat.find({\n          chatId,\n          time: { $lt: last },\n        }).sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return messages.reverse();\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n  }\n  return QuestionService;\n};\n"]}