{"version":3,"sources":["../../../app/service/question.js"],"names":["module","exports","app","model","Question","User","Tag","Chat","PAGE_SIZE","QuestionService","title","content","tagName","images","user","ctx","desc","length","slice","findOne","tag","userId","_id","nickName","headImage","location","save","question","findByIdAndUpdate","$inc","questionCount","Error","questionId","remove","res","result","n","findById","count","answerCount","$push","answers","certification","id","answerId","update","$pull","nModified","attentions","attentionCount","find","experts","last","time","$lt","sort","limit","exec","tags","chatId","messages","reverse","Service"],"mappings":"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","file":"question.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const {\n    Question,\n    User,\n    Tag,\n    Chat,\n  } = app.model;\n  const PAGE_SIZE = 30;\n  class QuestionService extends app.Service {\n\n    /**\n     * 新建问题\n     * @param {String} title 标题\n     * @param {String} content 内容\n     * @param {String} tagName 分类标签名\n     * @param {String} images 图片地址\n     * @return {*} 问题详情数据\n     */\n    async addQuestion(title, content, tagName, images) {\n      const user = this.ctx.user;\n      try {\n        let desc;\n        if (content.length > 30) {\n          desc = content.slice(0, 30);\n        } else {\n          desc = content;\n        }\n        const tag = await Tag.findOne({\n          tagName,\n        });\n        const question = await new Question({\n          title,\n          content,\n          tag,\n          images,\n          desc,\n          userId: user._id,\n          nickName: user.nickName,\n          headImage: user.headImage,\n          location: user.location,\n        }).save();\n        await User.findByIdAndUpdate(user._id, {\n          $inc: {\n            questionCount: 1,\n          },\n        });\n        return {\n          question,\n        };\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 删除问题\n     * @param {String} questionId 问题id\n     * @return {*} 成功状态\n     */\n    async deleteQuestion(questionId) {\n      try {\n        const res = await Question.remove({\n          _id: questionId,\n          userId: this.ctx.user._id,\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $inc: {\n            questionCount: -1,\n          },\n        });\n        if (res.result.n !== 1) {\n          throw new Error();\n        }\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 添加回答\n     * @param {String} questionId 问题id\n     * @param {String} content 内容\n     * @param {String} images 图片地址\n     * @return {*} 回答\n     */\n    async addAnswer(questionId, content, images) {\n      const user = this.ctx.user;\n      try {\n        const question = await Question.findById(questionId);\n        await Question.findByIdAndUpdate(questionId, {\n          $inc: {\n            count: 1,\n            answerCount: 1,\n          },\n          $push: {\n            answers: {\n              _id: question.count + 1,\n              content,\n              userId: user._id,\n              nickName: user.nickName,\n              headImage: user.headImage,\n              certification: user.certification,\n              images,\n            },\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $push: {\n            answers: questionId,\n          },\n          $inc: {\n            answerCount: 1,\n          },\n        });\n        const result = await Question.findById(questionId, 'answers');\n        return result.answers.id(question.count + 1);\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 删除回答\n     * @param {String} questionId 问题id\n     * @param {Number} answerId 回答id\n     * @return {*} 成功状态\n     */\n    async deleteAnswer(questionId, answerId) {\n      try {\n        const res = await Question.update({\n          _id: questionId,\n        }, {\n          $inc: {\n            answerCount: -1,\n          },\n          $pull: {\n            answers: {\n              _id: answerId,\n            },\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $inc: {\n            answerCount: -1,\n          },\n        });\n        if (res.nModified !== 1) {\n          throw new Error();\n        }\n        return 'success';\n      } catch (e) {\n        throw new Error('DELETE_ERROR');\n      }\n    }\n\n    /**\n     * 关注问题\n     * @param {String} questionId 问题id\n     * @return {*} 成功状态\n     */\n    async attentionQuestion(questionId) {\n      try {\n        await Question.findByIdAndUpdate(questionId, {\n          $push: {\n            attentions: this.ctx.user._id,\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $push: {\n            attentions: questionId,\n          },\n          $inc: {\n            attentionCount: 1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 取消关注问题\n     * @param {String} questionId 问题id\n     * @return {*} 成功状态\n     */\n    async removeAttentionQuestion(questionId) {\n      try {\n        await Question.findByIdAndUpdate(questionId, {\n          $pull: {\n            attentions: this.ctx.user._id,\n          },\n        });\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $pull: {\n            attentions: questionId,\n          },\n          $inc: {\n            attentionCount: -1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取专家列表\n     * @param {String} tag 标签\n     * @return {*} 专家列表\n     */\n    async getExpertList(tag) {\n      try {\n        const experts = await User.find({\n          certification: tag,\n        }, '_id nickName headImage description certification');\n        return experts;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 分类获取问题列表\n     * @param {String} tag 标签\n     * @param {String} last 最后时间\n     * @return {*} 问题列表\n     */\n    async getQuestionList(tag, last) {\n      try {\n        const res = await Question.find({\n          'tag.tagId': tag,\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time userId').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取全部问题列表\n     * @param {String} last 最后时间\n     * @return {*} 问题列表\n     */\n    async getAllQuestionList(last) {\n      try {\n        const res = await Question.find({\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time userId').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取问题详情\n     * @param {String} id 问题id\n     * @return {*} 问题列表\n     */\n    async getQuestion(id) {\n      try {\n        const res = await Question.findById(id);\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 获取问题标签\n     * @return {*} 问题标签\n     */\n    async getTags() {\n      try {\n        const res = await Tag.find({});\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async saveTags(tags) {\n      try {\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          tags,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async getChat(chatId, last) {\n      try {\n        const messages = await Chat.find({\n          chatId,\n          time: { $lt: last },\n        }).sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return messages.reverse();\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n  }\n  return QuestionService;\n};\n"]}