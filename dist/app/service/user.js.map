{"version":3,"sources":["../../../app/service/user.js"],"names":["module","exports","fs","require","path","cryptos","crypto","app","model","User","Circle","Question","Message","Expert","PAGE_SIZE","RECENT","NEW_MESSAGE","NEW_VERIFY_CODE_PREFIX","RESET_VERIFY_CODE_PREFIX","SALT","UserService","tel","password","code","redis","get","realCode","Error","find","user","length","realPassword","getRealPassword","encryptedPassword","generateEncryptedPassword","save","newUser","token","generateToken","_id","findOne","update","reset","verifyCode","generateVerifyCode","set","expire","aliSms","sendSMS","PhoneNumbers","SignName","TemplateCode","TemplateParam","JSON","stringify","nickName","gender","age","job","location","description","headImage","ctx","targetId","findById","targetUser","$push","followings","userId","certification","$inc","followingCount","followers","followerCount","findByIdAndUpdate","$pull","collections","result","reverse","last","$in","attentions","time","$lt","sort","limit","exec","questions","answers","circles","myId","messages","res","zrangebyscore","Date","now","recent","item","temp","newMessage","sismember","unshift","realName","idCardNumber","urls","tag","message","expert","Math","random","slice","keyPath","join","__dirname","privatePem","readFileSync","RSADecrypt","createHash","digest","jwt","sign","config","secret","Service"],"mappings":"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","file":"user.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const fs = require('fs');\n  const path = require('path');\n  const cryptos = require('cryptos');\n  const crypto = require('crypto');\n\n  const {\n    User,\n    Circle,\n    Question,\n    Message,\n    Expert,\n  } = app.model;\n  const PAGE_SIZE = 30;\n\n  const RECENT = 'RECENT';\n  const NEW_MESSAGE = 'NEW_MESSAGE';\n\n  const NEW_VERIFY_CODE_PREFIX = 'NEW';\n  const RESET_VERIFY_CODE_PREFIX = 'RESET';\n  const SALT = 'dcv9u89h93ggf78rth3cng02n';\n\n  class UserService extends app.Service {\n\n    /**\n     * 用户注册\n     * @param {String} tel 手机号\n     * @param {String} password 加密的密码\n     * @param {String} code 验证码\n     * @return {String} 本次token信息\n     */\n    async signUp(tel, password, code) {\n      const realCode = await app.redis.get(NEW_VERIFY_CODE_PREFIX + tel);\n      if (code !== realCode) {\n        throw new Error('VERIFY_CODE_ERROR');\n      }\n      const user = await User.find({\n        tel,\n      });\n      if (user.length) {\n        throw new Error('USER_EXIST');\n      }\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      const newUser = await new User({\n        tel,\n        password: encryptedPassword,\n      }).save();\n      const token = this.generateToken(newUser._id);\n      return token;\n    }\n\n    /**\n     * 用户登录\n     * @param {String} tel 手机号\n     * @param {String} password 加密的密码\n     * @return {String} 本次token信息\n     */\n    async signIn(tel, password) {\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      const user = await User.findOne({\n        tel,\n        password: encryptedPassword,\n      });\n      if (!user) {\n        throw new Error('ERROR_USER');\n      }\n      const token = this.generateToken(user._id);\n      return token;\n    }\n\n    /**\n     * 重置密码\n     * @param {String} tel 手机号\n     * @param {String} code 验证码\n     * @param {String} password 加密的密码\n     * @return {String} 成功状态\n     */\n    async resetPassword(tel, code, password) {\n      const realCode = await app.redis.get(RESET_VERIFY_CODE_PREFIX + tel);\n      if (code !== realCode) {\n        throw new Error('VERIFY_CODE_ERROR');\n      }\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      try {\n        await User.update({\n          tel,\n        }, {\n          password: encryptedPassword,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('RESET_PASSWORD_ERROR');\n      }\n    }\n\n    /**\n     * 发送验证码\n     * @param {String} tel 用户信息\n     * @param {boolean} reset 是否为重置密码\n     * @return {String} 成功状态\n     */\n    async sendVerifyCode(tel, reset = false) {\n      const user = await User.findOne({\n        tel,\n      });\n      if (reset) {\n        if (!user) {\n          throw new Error('NO_USER');\n        }\n      } else {\n        if (user) {\n          throw new Error('USER_EXIST');\n        }\n      }\n      try {\n        const verifyCode = this.generateVerifyCode();\n        if (reset) {\n          await app.redis.set(RESET_VERIFY_CODE_PREFIX + tel, verifyCode);\n          app.redis.expire(RESET_VERIFY_CODE_PREFIX + tel, 5 * 60);\n        } else {\n          await app.redis.set(NEW_VERIFY_CODE_PREFIX + tel, verifyCode);\n          app.redis.expire(NEW_VERIFY_CODE_PREFIX + tel, 5 * 60);\n        }\n        await app.aliSms.sendSMS({\n          PhoneNumbers: tel,\n          SignName: '小农之家',\n          TemplateCode: 'SMS_112485253',\n          TemplateParam: JSON.stringify({ code: verifyCode }),\n        });\n        if (reset) {\n          app.redis.expire(RESET_VERIFY_CODE_PREFIX + tel, 5 * 60);\n        } else {\n          app.redis.expire(NEW_VERIFY_CODE_PREFIX + tel, 5 * 60);\n        }\n        return 'success';\n      } catch (e) {\n        throw new Error('SEND_CODE_ERROR');\n      }\n    }\n\n    /**\n     * 修改用户资料\n     * @param {String} nickName 昵称\n     * @param {String} gender 性别\n     * @param {Number} age 年龄\n     * @param {String} job 职业\n     * @param {String} location 地区\n     * @param {String} description 个人简介\n     * @param {String} headImage 头像\n     * @return {String} 成功状态\n     */\n    async modifyUserInfo(nickName, gender, age, job, location, description, headImage) {\n      try {\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          nickName,\n          gender,\n          age,\n          job,\n          location,\n          description,\n          headImage,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 关注用户\n     * @param {String} targetId 目标用户id\n     * @return {String} 成功状态\n     */\n    async giveFollow(targetId) {\n      try {\n        const targetUser = await User.findById(targetId);\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          $push: {\n            followings: {\n              userId: targetId,\n              certification: targetUser.certification,\n              nickName: targetUser.nickName,\n              headImage: targetUser.headImage,\n              description: targetUser.description,\n            },\n          },\n          $inc: {\n            followingCount: 1,\n          },\n        });\n        await User.update({\n          _id: targetId,\n        }, {\n          $push: {\n            followers: {\n              userId: this.ctx.user._id,\n              nickName: this.ctx.user.nickName,\n              headImage: this.ctx.user.headImage,\n              description: this.ctx.user.description,\n              certification: this.ctx.user.certification,\n            },\n          },\n          $inc: {\n            followerCount: 1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 取消关注用户\n     * @param {String} targetId 目标用户id\n     * @return {String} 成功状态\n     */\n    async cancelFollow(targetId) {\n      try {\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $pull: {\n            followings: {\n              userId: targetId,\n            },\n          },\n          $inc: {\n            followingCount: -1,\n          },\n        });\n        await User.findByIdAndUpdate(targetId, {\n          $pull: {\n            followers: {\n              userId: this.ctx.user._id,\n            },\n          },\n          $inc: {\n            followerCount: -1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 获取用户信息\n     * @param {String} userId 用户id\n     * @return {String} 用户信息\n     */\n    async getUserInfo(userId) {\n      try {\n        const user = await User.findById(userId, 'certification nickName headImage description gender age questionCount answerCount circleCount job location followerCount followingCount');\n        if (!user) {\n          throw new Error('NOT_FOUND');\n        }\n        return user;\n      } catch (e) {\n        throw new Error('NOT_FOUND');\n      }\n    }\n\n    /**\n     * 查看我的信息\n     * @return {*} 我的信息\n     */\n    async getUserIndex() {\n      try {\n        const user = await User.findById(this.ctx.user._id);\n        if (!user) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return user;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看收藏的文章列表\n     * @return {*} 收藏的文章\n     */\n    async getCollections() {\n      try {\n        const collections = await User.findById(this.ctx.user._id, 'collections');\n        if (!collections) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        const result = collections.collections.reverse();\n        return result;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注的问题列表\n     * @param {String} last 最后时间\n     * @return {*} 关注的问题\n     */\n    async getAttentions(last) {\n      try {\n        const attentions = await Question.find({\n          _id: {\n            $in: this.ctx.user.attentions,\n          },\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!attentions) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return attentions;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注的人列表\n     * @return {*} 关注的人\n     */\n    async getFollowings() {\n      try {\n        const followings = await User.find({\n          _id: {\n            $in: [ this.ctx.user.followings ],\n          },\n        }, '_id nickName headImage');\n        return followings;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注我的人列表\n     * @return {*} 关注我的人\n     */\n    async getFollowers() {\n      try {\n        const followers = await User.find({\n          _id: {\n            $in: [ this.ctx.user.followers ],\n          },\n        }, '_id nickName headImage');\n        return followers;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我的提问记录\n     * @param {String} last 最后时间\n     * @return {*} 我的提问\n     */\n    async getQuestions(last) {\n      try {\n        const questions = await Question.find({\n          userId: this.ctx.user._id,\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!questions) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return questions;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我的回答记录\n     * @param {String} last 最后时间\n     * @return {*} 我的回答\n     */\n    async getAnswers(last) {\n      try {\n        const answers = await Question.find({\n          _id: {\n            $in: this.ctx.user.answers,\n          },\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!answers) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return answers;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我发表的动态\n     * @param {String} last 最后时间\n     * @return {*} 我发表的动态\n     */\n    async getCircles(last) {\n      try {\n        const circles = await Circle.find({\n          userId: this.ctx.user._id,\n          time: { $lt: last },\n        }, 'userId nickName headImage likeCount content images commentCount time').sort({\n          time: 'desc',\n        });\n        if (!circles) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return circles;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async showMessage() {\n      try {\n        const messages = await Message.find({\n          myId: this.ctx.user._id,\n        }).sort({\n          time: 'desc',\n        });\n        if (!messages) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return messages;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async getRecent() {\n      try {\n        const res = [];\n        const recent = await app.redis.zrangebyscore(RECENT + this.ctx.user._id, 0, Date.now());\n        if (!recent.length) {\n          return res;\n        }\n        for (const item of recent) {\n          const user = await User.findById(item, 'certification nickName headImage description');\n          const temp = {\n            userId: item,\n            certification: user.certification,\n            nickName: user.nickName,\n            headImage: user.headImage,\n            description: user.description,\n            newMessage: false,\n          };\n          if (await app.redis.sismember(NEW_MESSAGE + this.ctx.user._id, item)) {\n            temp.newMessage = true;\n            res.unshift(temp);\n          } else {\n            res.unshift(temp);\n          }\n        }\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async applyCertification(realName, idCardNumber, urls, tag, message) {\n      const expert = await Expert.findOne({ idCardNumber });\n      if (expert) {\n        throw new Error('REPEAT');\n      }\n      try {\n        await new Expert({\n          userId: this.ctx.user._id,\n          realName,\n          idCardNumber,\n          urls,\n          tag,\n          message,\n        }).save();\n        return 'success';\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 生成随机验证码\n     * @return {string} 验证码\n     */\n    generateVerifyCode() {\n      return (Math.random() + '').slice(2, 8);\n    }\n\n    /**\n     * 获取真实密码\n     * @param {string} password rsa加密的密码\n     * @return {string} 真实密码\n     */\n    getRealPassword(password) {\n      const keyPath = path.join(__dirname, './rsa_private_key.pem');\n      const privatePem = fs.readFileSync(keyPath);\n      return cryptos.RSADecrypt(password, privatePem);\n    }\n\n    /**\n     * 生成加密的密码\n     * @param {string} password 原密码\n     * @return {string} 加密的密码\n     */\n    generateEncryptedPassword(password) {\n      return crypto.createHash('md5').update(password + SALT).digest('hex');\n    }\n\n    /**\n     * 根据用户 id 生成 token\n     * @param {string} userId 用户id\n     * @return {string} token\n     */\n    generateToken(userId) {\n      return app.jwt.sign({\n        userId,\n      }, app.config.jwt.secret);\n    }\n  }\n  return UserService;\n};\n"]}