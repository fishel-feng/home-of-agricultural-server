{"version":3,"sources":["../../../app/service/user.js"],"names":["module","exports","fs","require","path","cryptos","crypto","app","model","User","Circle","Question","PAGE_SIZE","NEW_VERIFY_CODE_PREFIX","RESET_VERIFY_CODE_PREFIX","SALT","UserService","tel","password","code","redis","get","realCode","Error","find","user","length","realPassword","getRealPassword","encryptedPassword","generateEncryptedPassword","save","newUser","token","generateToken","_id","findOne","update","reset","verifyCode","generateVerifyCode","set","nickName","gender","age","job","location","description","ctx","headImage","targetId","findById","targetUser","$push","followings","userId","$inc","followingCount","followers","certification","followerCount","$pull","collections","last","$in","attentions","time","$lt","sort","limit","exec","questions","answers","circles","Math","random","slice","keyPath","join","__dirname","privatePem","readFileSync","RSADecrypt","createHash","digest","jwt","sign","config","secret","Service"],"mappings":"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","file":"user.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const fs = require('fs');\n  const path = require('path');\n  const cryptos = require('cryptos');\n  const crypto = require('crypto');\n\n  const {\n    User,\n    Circle,\n    Question,\n  } = app.model;\n  const PAGE_SIZE = 30;\n\n  const NEW_VERIFY_CODE_PREFIX = 'NEW';\n  const RESET_VERIFY_CODE_PREFIX = 'RESET';\n  const SALT = 'dcv9u89h93ggf78rth3cng02n';\n\n  class UserService extends app.Service {\n\n    /**\n     * 用户注册\n     * @param {String} tel 手机号\n     * @param {String} password 加密的密码\n     * @param {String} code 验证码\n     * @return {String} 本次token信息\n     */\n    async signUp(tel, password, code) {\n      const realCode = await app.redis.get(NEW_VERIFY_CODE_PREFIX + tel);\n      if (code !== realCode) {\n        throw new Error('VERIFY_CODE_ERROR');\n      }\n      const user = await User.find({\n        tel,\n      });\n      if (user.length) {\n        throw new Error('USER_EXIST');\n      }\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      const newUser = await new User({\n        tel,\n        password: encryptedPassword,\n      }).save();\n      const token = this.generateToken(newUser._id);\n      return token;\n    }\n\n    /**\n     * 用户登录\n     * @param {String} tel 手机号\n     * @param {String} password 加密的密码\n     * @return {String} 本次token信息\n     */\n    async signIn(tel, password) {\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      const user = await User.findOne({\n        tel,\n        password: encryptedPassword,\n      });\n      if (!user) {\n        throw new Error('ERROR_USER');\n      }\n      const token = this.generateToken(user._id);\n      return token;\n    }\n\n    /**\n     * 重置密码\n     * @param {String} tel 手机号\n     * @param {String} code 验证码\n     * @param {String} password 加密的密码\n     * @return {String} 成功状态\n     */\n    async resetPassword(tel, code, password) {\n      const realCode = await app.redis.get(RESET_VERIFY_CODE_PREFIX + tel);\n      if (code !== realCode) {\n        throw new Error('VERIFY_CODE_ERROR');\n      }\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      try {\n        await User.update({\n          tel,\n        }, {\n          password: encryptedPassword,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('RESET_PASSWORD_ERROR');\n      }\n    }\n\n    /**\n     * 发送验证码\n     * @param {String} tel 用户信息\n     * @param {String} reset 是否为重置密码\n     * @return {String} 成功状态\n     */\n    async sendVerifyCode(tel, reset = false) {\n      const user = await User.findOne({\n        tel,\n      });\n      if (reset) {\n        if (!user) {\n          throw new Error('NO_USER');\n        }\n      } else {\n        if (user) {\n          throw new Error('USER_EXIST');\n        }\n      }\n      try {\n        const verifyCode = this.generateVerifyCode();\n        if (reset) {\n          await app.redis.set(RESET_VERIFY_CODE_PREFIX + tel, verifyCode);\n        } else {\n          await app.redis.set(NEW_VERIFY_CODE_PREFIX + tel, verifyCode);\n        }\n        // todo 发短信\n        return 'success';\n      } catch (e) {\n        throw new Error('SEND_CODE_ERROR');\n      }\n    }\n\n    /**\n     * 修改用户资料\n     * @param {String} nickName 昵称\n     * @param {String} gender 性别\n     * @param {Number} age 年龄\n     * @param {String} job 职业\n     * @param {String} location 地区\n     * @param {String} description 个人简介\n     * @return {String} 成功状态\n     */\n    async modifyUserInfo(nickName, gender, age, job, location, description) {\n      try {\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          nickName,\n          gender,\n          age,\n          job,\n          location,\n          description,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 修改用户头像\n     * @param {String} headImage 头像\n     * @return {String} 成功状态\n     */\n    async modifyHeadImage(headImage) {\n      try {\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          headImage,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 关注用户\n     * @param {String} targetId 目标用户id\n     * @return {String} 成功状态\n     */\n    async giveFollow(targetId) {\n      try {\n        const targetUser = await User.findById(targetId);\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          $push: {\n            followings: {\n              userId: targetId,\n              nickName: targetUser.nickName,\n              headImage: targetUser.headImage,\n              description: targetUser.description,\n            },\n          },\n          $inc: {\n            followingCount: 1,\n          },\n        });\n        await User.update({\n          _id: targetId,\n        }, {\n          $push: {\n            followers: {\n              userId: this.ctx.user._id,\n              nickName: this.ctx.user.nickName,\n              headImage: this.ctx.user.headImage,\n              description: this.ctx.user.description,\n              certification: this.ctx.user.certification,\n            },\n          },\n          $inc: {\n            followerCount: 1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 取消关注用户\n     * @param {String} targetId 目标用户id\n     * @return {String} 成功状态\n     */\n    async cancelFollow(targetId) {\n      try {\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          $pull: {\n            'followings.userId': targetId,\n          },\n          $inc: {\n            followingCount: -1,\n          },\n        });\n        await User.update({\n          _id: targetId,\n        }, {\n          $pull: {\n            'followers.userId': this.ctx.user._id,\n          },\n          $inc: {\n            followerCount: -1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 获取用户信息\n     * @param {String} userId 用户id\n     * @return {String} 用户信息\n     */\n    async getUserInfo(userId) {\n      try {\n        const user = await User.findById(userId, 'certification nickName headImage description gender age questionCount answerCount circleCount job location followerCount followingCount');\n        if (!user) {\n          throw new Error('NOT_FOUND');\n        }\n        return user;\n      } catch (e) {\n        throw new Error('NOT_FOUND');\n      }\n    }\n\n    /**\n     * 查看我的信息\n     * @return {*} 我的信息\n     */\n    async getUserIndex() {\n      try {\n        const user = await User.findById(this.ctx.user._id);\n        if (!user) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return user;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看收藏的文章列表\n     * @return {*} 收藏的文章\n     */\n    async getCollections() {\n      try {\n        const collections = await User.findById(this.ctx.user._id, 'collections');\n        if (!collections) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return collections;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注的问题列表\n     * @param {String} last 最后时间\n     * @return {*} 关注的问题\n     */\n    async getAttentions(last) {\n      try {\n        const attentions = await Question.find({\n          _id: {\n            $in: this.ctx.user.attentions,\n          },\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!attentions) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return attentions;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注的人列表\n     * @return {*} 关注的人\n     */\n    async getFollowings() {\n      try {\n        const followings = await User.find({\n          _id: {\n            $in: [ this.ctx.user.followings ],\n          },\n        }, '_id nickName headImage');\n        return followings;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注我的人列表\n     * @return {*} 关注我的人\n     */\n    async getFollowers() {\n      try {\n        const followers = await User.find({\n          _id: {\n            $in: [ this.ctx.user.followers ],\n          },\n        }, '_id nickName headImage');\n        return followers;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我的提问记录\n     * @param {String} last 最后时间\n     * @return {*} 我的提问\n     */\n    async getQuestions(last) {\n      try {\n        const questions = await Question.find({\n          userId: this.ctx.user._id,\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!questions) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return questions;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我的回答记录\n     * @param {String} last 最后时间\n     * @return {*} 我的回答\n     */\n    async getAnswers(last) {\n      try {\n        const answers = await Question.find({\n          _id: {\n            $in: this.ctx.user.answers,\n          },\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!answers) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return answers;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我发表的动态\n     * @param {String} last 最后时间\n     * @return {*} 我发表的动态\n     */\n    async getCircles(last) {\n      try {\n        const circles = await Circle.find({\n          userId: this.ctx.user._id,\n          time: { $lt: last },\n        }, 'userId nickName headImage likeCount content images commentCount time').sort({\n          time: 'desc',\n        });\n        if (!circles) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return circles;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 生成随机验证码\n     * @return {string} 验证码\n     */\n    generateVerifyCode() {\n      return (Math.random() + '').slice(2, 8);\n    }\n\n    /**\n     * 获取真实密码\n     * @param {string} password rsa加密的密码\n     * @return {string} 真实密码\n     */\n    getRealPassword(password) {\n      const keyPath = path.join(__dirname, './rsa_private_key.pem');\n      const privatePem = fs.readFileSync(keyPath);\n      return cryptos.RSADecrypt(password, privatePem);\n    }\n\n    /**\n     * 生成加密的密码\n     * @param {string} password 原密码\n     * @return {string} 加密的密码\n     */\n    generateEncryptedPassword(password) {\n      return crypto.createHash('md5').update(password + SALT).digest('hex');\n    }\n\n    /**\n     * 根据用户 id 生成 token\n     * @param {string} userId 用户id\n     * @return {string} token\n     */\n    generateToken(userId) {\n      return app.jwt.sign({\n        userId,\n      }, app.config.jwt.secret);\n    }\n  }\n  return UserService;\n};\n"]}