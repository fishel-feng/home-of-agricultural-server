{"version":3,"sources":["../../../app/service/user.js"],"names":["module","exports","fs","require","path","cryptos","crypto","app","model","User","Circle","Question","Message","PAGE_SIZE","RECENT","NEW_MESSAGE","NEW_VERIFY_CODE_PREFIX","RESET_VERIFY_CODE_PREFIX","SALT","UserService","tel","password","code","redis","get","realCode","Error","find","user","length","realPassword","getRealPassword","encryptedPassword","generateEncryptedPassword","save","newUser","token","generateToken","_id","findOne","update","reset","verifyCode","generateVerifyCode","set","nickName","gender","age","job","location","description","headImage","ctx","targetId","findById","targetUser","$push","followings","userId","$inc","followingCount","followers","certification","followerCount","findByIdAndUpdate","$pull","collections","last","$in","attentions","time","$lt","sort","limit","exec","questions","answers","circles","myId","messages","res","zrangebyscore","Date","now","recent","item","temp","newMessage","sismember","unshift","Math","random","slice","keyPath","join","__dirname","privatePem","readFileSync","RSADecrypt","createHash","digest","jwt","sign","config","secret","Service"],"mappings":"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","file":"user.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const fs = require('fs');\n  const path = require('path');\n  const cryptos = require('cryptos');\n  const crypto = require('crypto');\n\n  const {\n    User,\n    Circle,\n    Question,\n    Message,\n  } = app.model;\n  const PAGE_SIZE = 30;\n\n  const RECENT = 'RECENT';\n  const NEW_MESSAGE = 'NEW_MESSAGE';\n\n  const NEW_VERIFY_CODE_PREFIX = 'NEW';\n  const RESET_VERIFY_CODE_PREFIX = 'RESET';\n  const SALT = 'dcv9u89h93ggf78rth3cng02n';\n\n  class UserService extends app.Service {\n\n    /**\n     * 用户注册\n     * @param {String} tel 手机号\n     * @param {String} password 加密的密码\n     * @param {String} code 验证码\n     * @return {String} 本次token信息\n     */\n    async signUp(tel, password, code) {\n      const realCode = await app.redis.get(NEW_VERIFY_CODE_PREFIX + tel);\n      if (code !== realCode) {\n        throw new Error('VERIFY_CODE_ERROR');\n      }\n      const user = await User.find({\n        tel,\n      });\n      if (user.length) {\n        throw new Error('USER_EXIST');\n      }\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      const newUser = await new User({\n        tel,\n        password: encryptedPassword,\n      }).save();\n      const token = this.generateToken(newUser._id);\n      return token;\n    }\n\n    /**\n     * 用户登录\n     * @param {String} tel 手机号\n     * @param {String} password 加密的密码\n     * @return {String} 本次token信息\n     */\n    async signIn(tel, password) {\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      const user = await User.findOne({\n        tel,\n        password: encryptedPassword,\n      });\n      if (!user) {\n        throw new Error('ERROR_USER');\n      }\n      const token = this.generateToken(user._id);\n      return token;\n    }\n\n    /**\n     * 重置密码\n     * @param {String} tel 手机号\n     * @param {String} code 验证码\n     * @param {String} password 加密的密码\n     * @return {String} 成功状态\n     */\n    async resetPassword(tel, code, password) {\n      const realCode = await app.redis.get(RESET_VERIFY_CODE_PREFIX + tel);\n      if (code !== realCode) {\n        throw new Error('VERIFY_CODE_ERROR');\n      }\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      try {\n        await User.update({\n          tel,\n        }, {\n          password: encryptedPassword,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('RESET_PASSWORD_ERROR');\n      }\n    }\n\n    /**\n     * 发送验证码\n     * @param {String} tel 用户信息\n     * @param {String} reset 是否为重置密码\n     * @return {String} 成功状态\n     */\n    async sendVerifyCode(tel, reset = false) {\n      const user = await User.findOne({\n        tel,\n      });\n      if (reset) {\n        if (!user) {\n          throw new Error('NO_USER');\n        }\n      } else {\n        if (user) {\n          throw new Error('USER_EXIST');\n        }\n      }\n      try {\n        const verifyCode = this.generateVerifyCode();\n        if (reset) {\n          await app.redis.set(RESET_VERIFY_CODE_PREFIX + tel, verifyCode);\n        } else {\n          await app.redis.set(NEW_VERIFY_CODE_PREFIX + tel, verifyCode);\n        }\n        // todo 发短信\n        return 'success';\n      } catch (e) {\n        throw new Error('SEND_CODE_ERROR');\n      }\n    }\n\n    /**\n     * 修改用户资料\n     * @param {String} nickName 昵称\n     * @param {String} gender 性别\n     * @param {Number} age 年龄\n     * @param {String} job 职业\n     * @param {String} location 地区\n     * @param {String} description 个人简介\n     * @param {String} description 头像\n     * @return {String} 成功状态\n     */\n    async modifyUserInfo(nickName, gender, age, job, location, description, headImage) {\n      try {\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          nickName,\n          gender,\n          age,\n          job,\n          location,\n          description,\n          headImage,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 关注用户\n     * @param {String} targetId 目标用户id\n     * @return {String} 成功状态\n     */\n    async giveFollow(targetId) {\n      try {\n        const targetUser = await User.findById(targetId);\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          $push: {\n            followings: {\n              userId: targetId,\n              nickName: targetUser.nickName,\n              headImage: targetUser.headImage,\n              description: targetUser.description,\n            },\n          },\n          $inc: {\n            followingCount: 1,\n          },\n        });\n        await User.update({\n          _id: targetId,\n        }, {\n          $push: {\n            followers: {\n              userId: this.ctx.user._id,\n              nickName: this.ctx.user.nickName,\n              headImage: this.ctx.user.headImage,\n              description: this.ctx.user.description,\n              certification: this.ctx.user.certification,\n            },\n          },\n          $inc: {\n            followerCount: 1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 取消关注用户\n     * @param {String} targetId 目标用户id\n     * @return {String} 成功状态\n     */\n    async cancelFollow(targetId) {\n      try {\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $pull: {\n            followings: {\n              userId: targetId,\n            },\n          },\n          $inc: {\n            followingCount: -1,\n          },\n        });\n        await User.findByIdAndUpdate(targetId, {\n          $pull: {\n            followers: {\n              userId: this.ctx.user._id,\n            },\n          },\n          $inc: {\n            followerCount: -1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 获取用户信息\n     * @param {String} userId 用户id\n     * @return {String} 用户信息\n     */\n    async getUserInfo(userId) {\n      try {\n        const user = await User.findById(userId, 'certification nickName headImage description gender age questionCount answerCount circleCount job location followerCount followingCount');\n        if (!user) {\n          throw new Error('NOT_FOUND');\n        }\n        return user;\n      } catch (e) {\n        throw new Error('NOT_FOUND');\n      }\n    }\n\n    /**\n     * 查看我的信息\n     * @return {*} 我的信息\n     */\n    async getUserIndex() {\n      try {\n        const user = await User.findById(this.ctx.user._id);\n        if (!user) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return user;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看收藏的文章列表\n     * @return {*} 收藏的文章\n     */\n    async getCollections() {\n      try {\n        const collections = await User.findById(this.ctx.user._id, 'collections');\n        if (!collections) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return collections;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注的问题列表\n     * @param {String} last 最后时间\n     * @return {*} 关注的问题\n     */\n    async getAttentions(last) {\n      try {\n        const attentions = await Question.find({\n          _id: {\n            $in: this.ctx.user.attentions,\n          },\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!attentions) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return attentions;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注的人列表\n     * @return {*} 关注的人\n     */\n    async getFollowings() {\n      try {\n        const followings = await User.find({\n          _id: {\n            $in: [ this.ctx.user.followings ],\n          },\n        }, '_id nickName headImage');\n        return followings;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注我的人列表\n     * @return {*} 关注我的人\n     */\n    async getFollowers() {\n      try {\n        const followers = await User.find({\n          _id: {\n            $in: [ this.ctx.user.followers ],\n          },\n        }, '_id nickName headImage');\n        return followers;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我的提问记录\n     * @param {String} last 最后时间\n     * @return {*} 我的提问\n     */\n    async getQuestions(last) {\n      try {\n        const questions = await Question.find({\n          userId: this.ctx.user._id,\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!questions) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return questions;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我的回答记录\n     * @param {String} last 最后时间\n     * @return {*} 我的回答\n     */\n    async getAnswers(last) {\n      try {\n        const answers = await Question.find({\n          _id: {\n            $in: this.ctx.user.answers,\n          },\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!answers) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return answers;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我发表的动态\n     * @param {String} last 最后时间\n     * @return {*} 我发表的动态\n     */\n    async getCircles(last) {\n      try {\n        const circles = await Circle.find({\n          userId: this.ctx.user._id,\n          time: { $lt: last },\n        }, 'userId nickName headImage likeCount content images commentCount time').sort({\n          time: 'desc',\n        });\n        if (!circles) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return circles;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async showMessage() {\n      try {\n        const messages = await Message.find({\n          myId: this.ctx.user._id,\n        }).sort({\n          time: 'desc',\n        });\n        if (!messages) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return messages;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async getRecent() {\n      try {\n        const res = [];\n        const recent = await app.redis.zrangebyscore(RECENT + this.ctx.user._id, 0, Date.now());\n        if (!recent.length) {\n          return res;\n        }\n        for (const item of recent) {\n          const user = await User.findById(item, 'certification nickName headImage description');\n          const temp = {\n            userId: item,\n            certification: user.certification,\n            nickName: user.nickName,\n            headImage: user.headImage,\n            description: user.description,\n            newMessage: false,\n          };\n          if (await app.redis.sismember(NEW_MESSAGE + this.ctx.user._id, item)) {\n            temp.newMessage = true;\n            res.unshift(temp);\n          } else {\n            res.unshift(temp);\n          }\n        }\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 生成随机验证码\n     * @return {string} 验证码\n     */\n    generateVerifyCode() {\n      return (Math.random() + '').slice(2, 8);\n    }\n\n    /**\n     * 获取真实密码\n     * @param {string} password rsa加密的密码\n     * @return {string} 真实密码\n     */\n    getRealPassword(password) {\n      const keyPath = path.join(__dirname, './rsa_private_key.pem');\n      const privatePem = fs.readFileSync(keyPath);\n      return cryptos.RSADecrypt(password, privatePem);\n    }\n\n    /**\n     * 生成加密的密码\n     * @param {string} password 原密码\n     * @return {string} 加密的密码\n     */\n    generateEncryptedPassword(password) {\n      return crypto.createHash('md5').update(password + SALT).digest('hex');\n    }\n\n    /**\n     * 根据用户 id 生成 token\n     * @param {string} userId 用户id\n     * @return {string} token\n     */\n    generateToken(userId) {\n      return app.jwt.sign({\n        userId,\n      }, app.config.jwt.secret);\n    }\n  }\n  return UserService;\n};\n"]}