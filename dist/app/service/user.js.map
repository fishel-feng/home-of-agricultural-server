{"version":3,"sources":["../../../app/service/user.js"],"names":["module","exports","fs","require","path","cryptos","crypto","app","model","User","Circle","Question","Message","PAGE_SIZE","NEW_VERIFY_CODE_PREFIX","RESET_VERIFY_CODE_PREFIX","SALT","UserService","tel","password","code","redis","get","realCode","Error","find","user","length","realPassword","getRealPassword","encryptedPassword","generateEncryptedPassword","save","newUser","token","generateToken","_id","findOne","update","reset","verifyCode","generateVerifyCode","set","nickName","gender","age","job","location","description","ctx","headImage","targetId","findById","targetUser","$push","followings","userId","$inc","followingCount","followers","certification","followerCount","$pull","collections","last","$in","attentions","time","$lt","sort","limit","exec","questions","answers","circles","myId","messages","Math","random","slice","keyPath","join","__dirname","privatePem","readFileSync","RSADecrypt","createHash","digest","jwt","sign","config","secret","Service"],"mappings":"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","file":"user.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const fs = require('fs');\n  const path = require('path');\n  const cryptos = require('cryptos');\n  const crypto = require('crypto');\n\n  const {\n    User,\n    Circle,\n    Question,\n    Message,\n  } = app.model;\n  const PAGE_SIZE = 30;\n\n  const NEW_VERIFY_CODE_PREFIX = 'NEW';\n  const RESET_VERIFY_CODE_PREFIX = 'RESET';\n  const SALT = 'dcv9u89h93ggf78rth3cng02n';\n\n  class UserService extends app.Service {\n\n    /**\n     * 用户注册\n     * @param {String} tel 手机号\n     * @param {String} password 加密的密码\n     * @param {String} code 验证码\n     * @return {String} 本次token信息\n     */\n    async signUp(tel, password, code) {\n      const realCode = await app.redis.get(NEW_VERIFY_CODE_PREFIX + tel);\n      if (code !== realCode) {\n        throw new Error('VERIFY_CODE_ERROR');\n      }\n      const user = await User.find({\n        tel,\n      });\n      if (user.length) {\n        throw new Error('USER_EXIST');\n      }\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      const newUser = await new User({\n        tel,\n        password: encryptedPassword,\n      }).save();\n      const token = this.generateToken(newUser._id);\n      return token;\n    }\n\n    /**\n     * 用户登录\n     * @param {String} tel 手机号\n     * @param {String} password 加密的密码\n     * @return {String} 本次token信息\n     */\n    async signIn(tel, password) {\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      const user = await User.findOne({\n        tel,\n        password: encryptedPassword,\n      });\n      if (!user) {\n        throw new Error('ERROR_USER');\n      }\n      const token = this.generateToken(user._id);\n      return token;\n    }\n\n    /**\n     * 重置密码\n     * @param {String} tel 手机号\n     * @param {String} code 验证码\n     * @param {String} password 加密的密码\n     * @return {String} 成功状态\n     */\n    async resetPassword(tel, code, password) {\n      const realCode = await app.redis.get(RESET_VERIFY_CODE_PREFIX + tel);\n      if (code !== realCode) {\n        throw new Error('VERIFY_CODE_ERROR');\n      }\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      try {\n        await User.update({\n          tel,\n        }, {\n          password: encryptedPassword,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('RESET_PASSWORD_ERROR');\n      }\n    }\n\n    /**\n     * 发送验证码\n     * @param {String} tel 用户信息\n     * @param {String} reset 是否为重置密码\n     * @return {String} 成功状态\n     */\n    async sendVerifyCode(tel, reset = false) {\n      const user = await User.findOne({\n        tel,\n      });\n      if (reset) {\n        if (!user) {\n          throw new Error('NO_USER');\n        }\n      } else {\n        if (user) {\n          throw new Error('USER_EXIST');\n        }\n      }\n      try {\n        const verifyCode = this.generateVerifyCode();\n        if (reset) {\n          await app.redis.set(RESET_VERIFY_CODE_PREFIX + tel, verifyCode);\n        } else {\n          await app.redis.set(NEW_VERIFY_CODE_PREFIX + tel, verifyCode);\n        }\n        // todo 发短信\n        return 'success';\n      } catch (e) {\n        throw new Error('SEND_CODE_ERROR');\n      }\n    }\n\n    /**\n     * 修改用户资料\n     * @param {String} nickName 昵称\n     * @param {String} gender 性别\n     * @param {Number} age 年龄\n     * @param {String} job 职业\n     * @param {String} location 地区\n     * @param {String} description 个人简介\n     * @return {String} 成功状态\n     */\n    async modifyUserInfo(nickName, gender, age, job, location, description) {\n      try {\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          nickName,\n          gender,\n          age,\n          job,\n          location,\n          description,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 修改用户头像\n     * @param {String} headImage 头像\n     * @return {String} 成功状态\n     */\n    async modifyHeadImage(headImage) {\n      try {\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          headImage,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 关注用户\n     * @param {String} targetId 目标用户id\n     * @return {String} 成功状态\n     */\n    async giveFollow(targetId) {\n      try {\n        const targetUser = await User.findById(targetId);\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          $push: {\n            followings: {\n              userId: targetId,\n              nickName: targetUser.nickName,\n              headImage: targetUser.headImage,\n              description: targetUser.description,\n            },\n          },\n          $inc: {\n            followingCount: 1,\n          },\n        });\n        await User.update({\n          _id: targetId,\n        }, {\n          $push: {\n            followers: {\n              userId: this.ctx.user._id,\n              nickName: this.ctx.user.nickName,\n              headImage: this.ctx.user.headImage,\n              description: this.ctx.user.description,\n              certification: this.ctx.user.certification,\n            },\n          },\n          $inc: {\n            followerCount: 1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 取消关注用户\n     * @param {String} targetId 目标用户id\n     * @return {String} 成功状态\n     */\n    async cancelFollow(targetId) {\n      try {\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          $pull: {\n            'followings.userId': targetId,\n          },\n          $inc: {\n            followingCount: -1,\n          },\n        });\n        await User.update({\n          _id: targetId,\n        }, {\n          $pull: {\n            'followers.userId': this.ctx.user._id,\n          },\n          $inc: {\n            followerCount: -1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 获取用户信息\n     * @param {String} userId 用户id\n     * @return {String} 用户信息\n     */\n    async getUserInfo(userId) {\n      try {\n        const user = await User.findById(userId, 'certification nickName headImage description gender age questionCount answerCount circleCount job location followerCount followingCount');\n        if (!user) {\n          throw new Error('NOT_FOUND');\n        }\n        return user;\n      } catch (e) {\n        throw new Error('NOT_FOUND');\n      }\n    }\n\n    /**\n     * 查看我的信息\n     * @return {*} 我的信息\n     */\n    async getUserIndex() {\n      try {\n        const user = await User.findById(this.ctx.user._id);\n        if (!user) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return user;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看收藏的文章列表\n     * @return {*} 收藏的文章\n     */\n    async getCollections() {\n      try {\n        const collections = await User.findById(this.ctx.user._id, 'collections');\n        if (!collections) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return collections;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注的问题列表\n     * @param {String} last 最后时间\n     * @return {*} 关注的问题\n     */\n    async getAttentions(last) {\n      try {\n        const attentions = await Question.find({\n          _id: {\n            $in: this.ctx.user.attentions,\n          },\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!attentions) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return attentions;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注的人列表\n     * @return {*} 关注的人\n     */\n    async getFollowings() {\n      try {\n        const followings = await User.find({\n          _id: {\n            $in: [ this.ctx.user.followings ],\n          },\n        }, '_id nickName headImage');\n        return followings;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注我的人列表\n     * @return {*} 关注我的人\n     */\n    async getFollowers() {\n      try {\n        const followers = await User.find({\n          _id: {\n            $in: [ this.ctx.user.followers ],\n          },\n        }, '_id nickName headImage');\n        return followers;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我的提问记录\n     * @param {String} last 最后时间\n     * @return {*} 我的提问\n     */\n    async getQuestions(last) {\n      try {\n        const questions = await Question.find({\n          userId: this.ctx.user._id,\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!questions) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return questions;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我的回答记录\n     * @param {String} last 最后时间\n     * @return {*} 我的回答\n     */\n    async getAnswers(last) {\n      try {\n        const answers = await Question.find({\n          _id: {\n            $in: this.ctx.user.answers,\n          },\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!answers) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return answers;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我发表的动态\n     * @param {String} last 最后时间\n     * @return {*} 我发表的动态\n     */\n    async getCircles(last) {\n      try {\n        const circles = await Circle.find({\n          userId: this.ctx.user._id,\n          time: { $lt: last },\n        }, 'userId nickName headImage likeCount content images commentCount time').sort({\n          time: 'desc',\n        });\n        if (!circles) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return circles;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async showMessage() {\n      try {\n        const messages = await Message.find({\n          myId: this.ctx.user._id,\n        }).sort({\n          time: 'desc',\n        });\n        if (!messages) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return messages;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 生成随机验证码\n     * @return {string} 验证码\n     */\n    generateVerifyCode() {\n      return (Math.random() + '').slice(2, 8);\n    }\n\n    /**\n     * 获取真实密码\n     * @param {string} password rsa加密的密码\n     * @return {string} 真实密码\n     */\n    getRealPassword(password) {\n      const keyPath = path.join(__dirname, './rsa_private_key.pem');\n      const privatePem = fs.readFileSync(keyPath);\n      return cryptos.RSADecrypt(password, privatePem);\n    }\n\n    /**\n     * 生成加密的密码\n     * @param {string} password 原密码\n     * @return {string} 加密的密码\n     */\n    generateEncryptedPassword(password) {\n      return crypto.createHash('md5').update(password + SALT).digest('hex');\n    }\n\n    /**\n     * 根据用户 id 生成 token\n     * @param {string} userId 用户id\n     * @return {string} token\n     */\n    generateToken(userId) {\n      return app.jwt.sign({\n        userId,\n      }, app.config.jwt.secret);\n    }\n  }\n  return UserService;\n};\n"]}