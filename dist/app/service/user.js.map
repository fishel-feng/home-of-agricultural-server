{"version":3,"sources":["../../../app/service/user.js"],"names":["module","exports","fs","require","path","cryptos","crypto","app","model","User","Circle","Question","Message","PAGE_SIZE","RECENT","NEW_MESSAGE","NEW_VERIFY_CODE_PREFIX","RESET_VERIFY_CODE_PREFIX","SALT","UserService","tel","password","code","redis","get","realCode","Error","find","user","length","realPassword","getRealPassword","encryptedPassword","generateEncryptedPassword","save","newUser","token","generateToken","_id","findOne","update","reset","verifyCode","generateVerifyCode","set","nickName","gender","age","job","location","description","headImage","ctx","targetId","findById","targetUser","$push","followings","userId","certification","$inc","followingCount","followers","followerCount","findByIdAndUpdate","$pull","collections","result","reverse","last","$in","attentions","time","$lt","sort","limit","exec","questions","answers","circles","myId","messages","res","zrangebyscore","Date","now","recent","item","temp","newMessage","sismember","unshift","Math","random","slice","keyPath","join","__dirname","privatePem","readFileSync","RSADecrypt","createHash","digest","jwt","sign","config","secret","Service"],"mappings":"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","file":"user.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const fs = require('fs');\n  const path = require('path');\n  const cryptos = require('cryptos');\n  const crypto = require('crypto');\n\n  const {\n    User,\n    Circle,\n    Question,\n    Message,\n  } = app.model;\n  const PAGE_SIZE = 30;\n\n  const RECENT = 'RECENT';\n  const NEW_MESSAGE = 'NEW_MESSAGE';\n\n  const NEW_VERIFY_CODE_PREFIX = 'NEW';\n  const RESET_VERIFY_CODE_PREFIX = 'RESET';\n  const SALT = 'dcv9u89h93ggf78rth3cng02n';\n\n  class UserService extends app.Service {\n\n    /**\n     * 用户注册\n     * @param {String} tel 手机号\n     * @param {String} password 加密的密码\n     * @param {String} code 验证码\n     * @return {String} 本次token信息\n     */\n    async signUp(tel, password, code) {\n      const realCode = await app.redis.get(NEW_VERIFY_CODE_PREFIX + tel);\n      if (code !== realCode) {\n        throw new Error('VERIFY_CODE_ERROR');\n      }\n      const user = await User.find({\n        tel,\n      });\n      if (user.length) {\n        throw new Error('USER_EXIST');\n      }\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      const newUser = await new User({\n        tel,\n        password: encryptedPassword,\n      }).save();\n      const token = this.generateToken(newUser._id);\n      return token;\n    }\n\n    /**\n     * 用户登录\n     * @param {String} tel 手机号\n     * @param {String} password 加密的密码\n     * @return {String} 本次token信息\n     */\n    async signIn(tel, password) {\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      const user = await User.findOne({\n        tel,\n        password: encryptedPassword,\n      });\n      if (!user) {\n        throw new Error('ERROR_USER');\n      }\n      const token = this.generateToken(user._id);\n      return token;\n    }\n\n    /**\n     * 重置密码\n     * @param {String} tel 手机号\n     * @param {String} code 验证码\n     * @param {String} password 加密的密码\n     * @return {String} 成功状态\n     */\n    async resetPassword(tel, code, password) {\n      const realCode = await app.redis.get(RESET_VERIFY_CODE_PREFIX + tel);\n      if (code !== realCode) {\n        throw new Error('VERIFY_CODE_ERROR');\n      }\n      const realPassword = this.getRealPassword(password);\n      const encryptedPassword = this.generateEncryptedPassword(realPassword);\n      try {\n        await User.update({\n          tel,\n        }, {\n          password: encryptedPassword,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('RESET_PASSWORD_ERROR');\n      }\n    }\n\n    /**\n     * 发送验证码\n     * @param {String} tel 用户信息\n     * @param {boolean} reset 是否为重置密码\n     * @return {String} 成功状态\n     */\n    async sendVerifyCode(tel, reset = false) {\n      const user = await User.findOne({\n        tel,\n      });\n      if (reset) {\n        if (!user) {\n          throw new Error('NO_USER');\n        }\n      } else {\n        if (user) {\n          throw new Error('USER_EXIST');\n        }\n      }\n      try {\n        const verifyCode = this.generateVerifyCode();\n        if (reset) {\n          await app.redis.set(RESET_VERIFY_CODE_PREFIX + tel, verifyCode);\n        } else {\n          await app.redis.set(NEW_VERIFY_CODE_PREFIX + tel, verifyCode);\n        }\n        // todo 发短信\n        return 'success';\n      } catch (e) {\n        throw new Error('SEND_CODE_ERROR');\n      }\n    }\n\n    /**\n     * 修改用户资料\n     * @param {String} nickName 昵称\n     * @param {String} gender 性别\n     * @param {Number} age 年龄\n     * @param {String} job 职业\n     * @param {String} location 地区\n     * @param {String} description 个人简介\n     * @param {String} headImage 头像\n     * @return {String} 成功状态\n     */\n    async modifyUserInfo(nickName, gender, age, job, location, description, headImage) {\n      try {\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          nickName,\n          gender,\n          age,\n          job,\n          location,\n          description,\n          headImage,\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 关注用户\n     * @param {String} targetId 目标用户id\n     * @return {String} 成功状态\n     */\n    async giveFollow(targetId) {\n      try {\n        const targetUser = await User.findById(targetId);\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          $push: {\n            followings: {\n              userId: targetId,\n              certification: targetUser.certification,\n              nickName: targetUser.nickName,\n              headImage: targetUser.headImage,\n              description: targetUser.description,\n            },\n          },\n          $inc: {\n            followingCount: 1,\n          },\n        });\n        await User.update({\n          _id: targetId,\n        }, {\n          $push: {\n            followers: {\n              userId: this.ctx.user._id,\n              nickName: this.ctx.user.nickName,\n              headImage: this.ctx.user.headImage,\n              description: this.ctx.user.description,\n              certification: this.ctx.user.certification,\n            },\n          },\n          $inc: {\n            followerCount: 1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 取消关注用户\n     * @param {String} targetId 目标用户id\n     * @return {String} 成功状态\n     */\n    async cancelFollow(targetId) {\n      try {\n        await User.findByIdAndUpdate(this.ctx.user._id, {\n          $pull: {\n            followings: {\n              userId: targetId,\n            },\n          },\n          $inc: {\n            followingCount: -1,\n          },\n        });\n        await User.findByIdAndUpdate(targetId, {\n          $pull: {\n            followers: {\n              userId: this.ctx.user._id,\n            },\n          },\n          $inc: {\n            followerCount: -1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('MODIFY_FAIL');\n      }\n    }\n\n    /**\n     * 获取用户信息\n     * @param {String} userId 用户id\n     * @return {String} 用户信息\n     */\n    async getUserInfo(userId) {\n      try {\n        const user = await User.findById(userId, 'certification nickName headImage description gender age questionCount answerCount circleCount job location followerCount followingCount');\n        if (!user) {\n          throw new Error('NOT_FOUND');\n        }\n        return user;\n      } catch (e) {\n        throw new Error('NOT_FOUND');\n      }\n    }\n\n    /**\n     * 查看我的信息\n     * @return {*} 我的信息\n     */\n    async getUserIndex() {\n      try {\n        const user = await User.findById(this.ctx.user._id);\n        if (!user) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return user;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看收藏的文章列表\n     * @return {*} 收藏的文章\n     */\n    async getCollections() {\n      try {\n        const collections = await User.findById(this.ctx.user._id, 'collections');\n        if (!collections) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        const result = collections.collections.reverse();\n        return result;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注的问题列表\n     * @param {String} last 最后时间\n     * @return {*} 关注的问题\n     */\n    async getAttentions(last) {\n      try {\n        const attentions = await Question.find({\n          _id: {\n            $in: this.ctx.user.attentions,\n          },\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!attentions) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return attentions;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注的人列表\n     * @return {*} 关注的人\n     */\n    async getFollowings() {\n      try {\n        const followings = await User.find({\n          _id: {\n            $in: [ this.ctx.user.followings ],\n          },\n        }, '_id nickName headImage');\n        return followings;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注我的人列表\n     * @return {*} 关注我的人\n     */\n    async getFollowers() {\n      try {\n        const followers = await User.find({\n          _id: {\n            $in: [ this.ctx.user.followers ],\n          },\n        }, '_id nickName headImage');\n        return followers;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我的提问记录\n     * @param {String} last 最后时间\n     * @return {*} 我的提问\n     */\n    async getQuestions(last) {\n      try {\n        const questions = await Question.find({\n          userId: this.ctx.user._id,\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!questions) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return questions;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我的回答记录\n     * @param {String} last 最后时间\n     * @return {*} 我的回答\n     */\n    async getAnswers(last) {\n      try {\n        const answers = await Question.find({\n          _id: {\n            $in: this.ctx.user.answers,\n          },\n          time: { $lt: last },\n        }, '_id desc title images finishState answerCount tag time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        if (!answers) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return answers;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看我发表的动态\n     * @param {String} last 最后时间\n     * @return {*} 我发表的动态\n     */\n    async getCircles(last) {\n      try {\n        const circles = await Circle.find({\n          userId: this.ctx.user._id,\n          time: { $lt: last },\n        }, 'userId nickName headImage likeCount content images commentCount time').sort({\n          time: 'desc',\n        });\n        if (!circles) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return circles;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async showMessage() {\n      try {\n        const messages = await Message.find({\n          myId: this.ctx.user._id,\n        }).sort({\n          time: 'desc',\n        });\n        if (!messages) {\n          throw new Error('SOMETHING_ERROR');\n        }\n        return messages;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    async getRecent() {\n      try {\n        const res = [];\n        const recent = await app.redis.zrangebyscore(RECENT + this.ctx.user._id, 0, Date.now());\n        if (!recent.length) {\n          return res;\n        }\n        for (const item of recent) {\n          const user = await User.findById(item, 'certification nickName headImage description');\n          const temp = {\n            userId: item,\n            certification: user.certification,\n            nickName: user.nickName,\n            headImage: user.headImage,\n            description: user.description,\n            newMessage: false,\n          };\n          if (await app.redis.sismember(NEW_MESSAGE + this.ctx.user._id, item)) {\n            temp.newMessage = true;\n            res.unshift(temp);\n          } else {\n            res.unshift(temp);\n          }\n        }\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 生成随机验证码\n     * @return {string} 验证码\n     */\n    generateVerifyCode() {\n      return (Math.random() + '').slice(2, 8);\n    }\n\n    /**\n     * 获取真实密码\n     * @param {string} password rsa加密的密码\n     * @return {string} 真实密码\n     */\n    getRealPassword(password) {\n      const keyPath = path.join(__dirname, './rsa_private_key.pem');\n      const privatePem = fs.readFileSync(keyPath);\n      return cryptos.RSADecrypt(password, privatePem);\n    }\n\n    /**\n     * 生成加密的密码\n     * @param {string} password 原密码\n     * @return {string} 加密的密码\n     */\n    generateEncryptedPassword(password) {\n      return crypto.createHash('md5').update(password + SALT).digest('hex');\n    }\n\n    /**\n     * 根据用户 id 生成 token\n     * @param {string} userId 用户id\n     * @return {string} token\n     */\n    generateToken(userId) {\n      return app.jwt.sign({\n        userId,\n      }, app.config.jwt.secret);\n    }\n  }\n  return UserService;\n};\n"]}