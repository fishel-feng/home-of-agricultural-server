{"version":3,"sources":["../../../app/service/io.js"],"names":["module","exports","SOCKET","MESSAGE","CHAT","RECENT","NEW_MESSAGE","app","model","User","Question","Circle","Message","Chat","IOService","token","userId","getUserId","socketId","ctx","socket","id","redis","set","userToken","targetId","content","type","chatId","sender","save","zadd","Date","now","sadd","get","targetSocketId","nsp","sockets","emit","circleId","findById","user","myId","nickName","circle","authorId","authorSocketId","questionId","question","attentions","_id","title","rpush","expertId","expertSocketId","jwt","verify","Service"],"mappings":"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","file":"io.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const SOCKET = 'SOCKET';\n  const MESSAGE = 'MESSAGE';\n  const CHAT = 'CHAT';\n  const RECENT = 'RECENT';\n  const NEW_MESSAGE = 'NEW_MESSAGE';\n  const {\n    User,\n    Question,\n    Circle,\n    Message,\n    Chat,\n  } = app.model;\n\n  class IOService extends app.Service {\n\n    /**\n     * 登录\n     * @param {String} token token\n     * @return {Promise<void>} id\n     */\n    async login(token) {\n      const userId = this.getUserId(token);\n      const socketId = this.ctx.socket.id;\n      await app.redis.set(SOCKET + userId, socketId);\n      return socketId;\n    }\n\n    /**\n     * 聊天消息\n     * @param {String} userToken token\n     * @param {String} targetId 发往id\n     * @param {String} content 消息内容\n     * @param {String} type 消息类型\n     */\n    async chat(userToken, targetId, content, type) {\n      const userId = this.getUserId(userToken);\n      const chatId = targetId < userId ? targetId + userId : userId + targetId;\n      await new Chat({\n        chatId,\n        type,\n        content,\n        sender: userId,\n      }).save();\n      await app.redis.zadd(RECENT + targetId, Date.now(), userId);\n      await app.redis.sadd(NEW_MESSAGE + targetId, userId);\n      await app.redis.zadd(RECENT + userId, Date.now(), targetId);\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('chat', {\n          type,\n          content,\n          sender: userId,\n        });\n      } else {\n        await app.redis.sadd(CHAT + targetId, 'chatId');\n      }\n    }\n\n    /**\n     * 点赞\n     * @param {String} userToken token\n     * @param {String} targetId 被赞的人id\n     * @param {String} circleId 动态id\n     */\n    async like(userToken, targetId, circleId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      await new Message({\n        myId: targetId,\n        type: 'like',\n        userId,\n        nickName: user.nickName,\n        circleId,\n      }).save();\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n          type: 'like',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        });\n      } else {\n        await app.redis.set(MESSAGE + targetId, '1');\n      }\n    }\n\n    /**\n     * 评论\n     * @param {String} userToken token\n     * @param {String} circleId 动态id\n     * @param {String} targetId 被评论的人id\n     */\n    async comment(userToken, circleId, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const circle = await Circle.findById(circleId);\n      const authorId = circle.userId;\n      await new Message({\n        myId: authorId,\n        type: 'comment',\n        userId,\n        nickName: user.nickName,\n        circleId,\n      }).save();\n      const authorSocketId = await app.redis.get(SOCKET + authorId);\n      if (authorSocketId) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('message', {\n          type: 'comment',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        });\n      } else {\n        await app.redis.set(MESSAGE + authorId, '1');\n      }\n      if (targetId) {\n        await new Message({\n          myId: targetId,\n          type: 'reply',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        }).save();\n        const targetSocketId = await app.redis.get(SOCKET + targetId);\n        if (targetSocketId) {\n          this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n            type: 'reply',\n            userId,\n            nickName: user.nickName,\n            circleId,\n          });\n        } else {\n          await app.redis.set(MESSAGE + targetId, '1');\n        }\n      }\n    }\n\n    /**\n     * 回答\n     * @param {String} userToken token\n     * @param {String} questionId 问题id\n     */\n    async answer(userToken, questionId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const question = await Question.findById(questionId);\n      const attentions = question.attentions;\n      const authorId = question.userId;\n      await new Message({\n        myId: authorId,\n        type: 'answer',\n        userId,\n        nickName: user.nickName,\n        questionId: question._id,\n        title: question.title,\n      }).save();\n      const authorSocketId = await app.redis.get(SOCKET + authorId);\n      if (authorSocketId) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('message', {\n          type: 'answer',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        });\n      } else {\n        await app.redis.rpush(MESSAGE + authorId, '1');\n      }\n      for (const id of attentions) {\n        await new Message({\n          myId: id,\n          type: 'attention',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        }).save();\n        const socketId = await app.redis.get(SOCKET + id);\n        if (socketId) {\n          this.ctx.socket.nsp.sockets[socketId].emit('message', {\n            type: 'attention',\n            userId,\n            nickName: user.nickName,\n            questionId: question._id,\n            title: question.title,\n          });\n        } else {\n          await app.redis.set(MESSAGE + id, '1');\n        }\n      }\n    }\n\n    /**\n     * 邀请回答\n     * @param {String} userToken token\n     * @param {String} expertId 专家id\n     * @param {String} questionId 问题id\n     */\n    async invite(userToken, expertId, questionId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const question = await Question.findById(questionId);\n      await new Message({\n        myId: expertId,\n        type: 'invite',\n        userId,\n        nickName: user.nickName,\n        questionId: question._id,\n        title: question.title,\n      }).save();\n      const expertSocketId = await app.redis.get(SOCKET + expertId);\n      if (expertSocketId) {\n        this.ctx.socket.nsp.sockets[expertSocketId].emit('message', {\n          type: 'invite',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        });\n      } else {\n        await app.redis.set(MESSAGE + expertId, '1');\n      }\n    }\n\n    /**\n     * 关注用户\n     * @param {String} userToken token\n     * @param {String} targetId 被关注的人id\n     */\n    async follow(userToken, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      await new Message({\n        myId: targetId,\n        type: 'follow',\n        userId,\n        nickName: user.nickName,\n      }).save();\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n          type: 'follow',\n          userId,\n          nickName: user.nickName,\n        });\n      } else {\n        await app.redis.set(MESSAGE + targetId, '1');\n      }\n    }\n\n    /**\n     * 从token中获取id\n     * @param {String} token token\n     * @return {String} userId 用户id\n     */\n    getUserId(token) {\n      return this.ctx.app.jwt.verify(token, '123456').userId;\n    }\n  }\n\n  return IOService;\n};\n"]}