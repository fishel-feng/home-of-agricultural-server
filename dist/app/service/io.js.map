{"version":3,"sources":["../../../app/service/io.js"],"names":["module","exports","SOCKET","MESSAGE","CHAT","app","model","User","Question","Circle","Message","Chat","IOService","token","userId","getUserId","socketId","ctx","socket","id","redis","set","userToken","targetId","content","type","chatId","sender","save","get","targetSocketId","nsp","sockets","emit","sadd","circleId","findById","user","myId","nickName","circle","authorId","authorSocketId","questionId","question","attentions","_id","title","rpush","forEach","expertId","expertSocketId","jwt","verify","Service"],"mappings":"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","file":"io.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const SOCKET = 'SOCKET';\n  const MESSAGE = 'MESSAGE';\n  const CHAT = 'CHAT';\n  const {\n    User,\n    Question,\n    Circle,\n    Message,\n    Chat,\n  } = app.model;\n\n  class IOService extends app.Service {\n\n    /**\n     * 登录\n     * @param {String} token token\n     * @return {Promise<void>} id\n     */\n    async login(token) {\n      const userId = this.getUserId(token);\n      const socketId = this.ctx.socket.id;\n      await app.redis.set(SOCKET + userId, socketId);\n      return socketId;\n    }\n\n    /**\n     * 聊天消息\n     * @param {String} userToken token\n     * @param {String} targetId 发往id\n     * @param {String} content 消息内容\n     * @param {String} type 消息类型\n     */\n    async chat(userToken, targetId, content, type) {\n      const userId = this.getUserId(userToken);\n      const chatId = targetId < userId ? targetId + userId : userId + targetId;\n      await new Chat({\n        chatId,\n        type,\n        content,\n        sender: userId,\n      }).save();\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('chat', {\n          chatId,\n          type,\n          content,\n          sender: userId,\n        });\n      } else {\n        await app.redis.sadd(CHAT + targetId, 'chatId');\n      }\n    }\n\n    /**\n     * 点赞\n     * @param {String} userToken token\n     * @param {String} targetId 被赞的人id\n     * @param {String} circleId 动态id\n     */\n    async like(userToken, targetId, circleId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      await new Message({\n        myId: targetId,\n        type: 'like',\n        userId,\n        nickName: user.nickName,\n        circleId,\n      }).save();\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n          type: 'like',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        });\n      } else {\n        await app.redis.set(MESSAGE + targetId, '1');\n      }\n    }\n\n    /**\n     * 评论\n     * @param {String} userToken token\n     * @param {String} circleId 动态id\n     * @param {String} targetId 被评论的人id\n     */\n    async comment(userToken, circleId, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const circle = await Circle.findById(circleId);\n      const authorId = circle.userId;\n      await new Message({\n        myId: authorId,\n        type: 'comment',\n        userId,\n        nickName: user.nickName,\n        circleId,\n      }).save();\n      const authorSocketId = await app.redis.get(SOCKET + authorId);\n      if (authorSocketId) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('message', {\n          type: 'comment',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        });\n      } else {\n        await app.redis.set(MESSAGE + authorId, '1');\n      }\n      if (targetId) {\n        await new Message({\n          myId: targetId,\n          type: 'reply',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        }).save();\n        const targetSocketId = await app.redis.get(SOCKET + targetId);\n        if (targetSocketId) {\n          this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n            type: 'reply',\n            userId,\n            nickName: user.nickName,\n            circleId,\n          });\n        } else {\n          await app.redis.set(MESSAGE + targetId, '1');\n        }\n      }\n    }\n\n    /**\n     * 回答\n     * @param {String} userToken token\n     * @param {String} questionId 问题id\n     */\n    async answer(userToken, questionId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const question = await Question.findById(questionId);\n      const attentions = question.attentions;\n      const authorId = question.userId;\n      await new Message({\n        myId: authorId,\n        type: 'answer',\n        userId,\n        nickName: user.nickName,\n        questionId: question._id,\n        title: question.title,\n      }).save();\n      const authorSocketId = await app.redis.get(SOCKET + authorId);\n      if (authorSocketId) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('message', {\n          type: 'answer',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        });\n      } else {\n        await app.redis.rpush(MESSAGE + authorId, '1');\n      }\n      attentions.forEach(async id => {\n        await new Message({\n          myId: id,\n          type: 'attention',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        }).save();\n        const socketId = await app.redis.get(SOCKET + id);\n        if (socketId) {\n          this.ctx.socket.nsp.sockets[socketId].emit('message', {\n            type: 'attention',\n            userId,\n            nickName: user.nickName,\n            questionId: question._id,\n            title: question.title,\n          });\n        } else {\n          await app.redis.set(MESSAGE + id, '1');\n        }\n      });\n    }\n\n    /**\n     * 邀请回答\n     * @param {String} userToken token\n     * @param {String} expertId 专家id\n     * @param {String} questionId 问题id\n     */\n    async invite(userToken, expertId, questionId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const question = await Question.findById(questionId);\n      await new Message({\n        myId: expertId,\n        type: 'invite',\n        userId,\n        nickName: user.nickName,\n        questionId: question._id,\n        title: question.title,\n      }).save();\n      const expertSocketId = await app.redis.get(SOCKET + expertId);\n      if (expertSocketId) {\n        this.ctx.socket.nsp.sockets[expertSocketId].emit('message', {\n          type: 'invite',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        });\n      } else {\n        await app.redis.set(MESSAGE + expertId, '1');\n      }\n    }\n\n    /**\n     * 关注用户\n     * @param {String} userToken token\n     * @param {String} targetId 被关注的人id\n     */\n    async follow(userToken, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      await new Message({\n        myId: targetId,\n        type: 'follow',\n        userId,\n        nickName: user.nickName,\n      }).save();\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n          type: 'follow',\n          userId,\n          nickName: user.nickName,\n        });\n      } else {\n        await app.redis.set(MESSAGE + targetId, '1');\n      }\n    }\n\n    /**\n     * 从token中获取id\n     * @param {String} token token\n     * @return {String} userId 用户id\n     */\n    getUserId(token) {\n      return this.ctx.app.jwt.verify(token, '123456').userId;\n    }\n  }\n\n  return IOService;\n};\n"]}