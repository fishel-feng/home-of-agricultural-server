{"version":3,"sources":["../../../app/service/io.js"],"names":["module","exports","SOCKET","MESSAGE","app","model","User","Question","Circle","IOService","token","userId","getUserId","socketId","ctx","socket","id","redis","set","to","message","get","targetSocketId","nsp","sockets","emit","userToken","targetId","circleId","findById","user","content","nickName","time","Date","now","rpush","JSON","stringify","type","circle","authorId","authorSocketId","questionId","question","attentions","_id","title","forEach","expertId","expertSocketId","jwt","verify","Service"],"mappings":"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","file":"io.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const SOCKET = 'SOCKET';\n  const MESSAGE = 'MESSAGE';\n  const {\n    User,\n    Question,\n    Circle,\n  } = app.model;\n  class IOService extends app.Service {\n\n    /**\n     * 登录\n     * @param {String} token token\n     * @return {Promise<void>} id\n     */\n    async login(token) {\n      const userId = this.getUserId(token);\n      const socketId = this.ctx.socket.id;\n      await app.redis.set(SOCKET + userId, socketId);\n      return socketId;\n    }\n\n    async chat(to, message) {\n      // todo\n      const userId = '5a16699d5e58179af45247d0';\n      const targetSocketId = await app.redis.get(SOCKET + to);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', userId, message);\n      }\n    }\n\n    async like(userToken, targetId, circleId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const content = { userId, nickName: user.nickName, circleId, time: Date.now() };\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('like', content);\n      } else {\n        await app.redis.rpush(MESSAGE + targetId, JSON.stringify({ type: 'like', content }));\n      }\n    }\n\n    async comment(userToken, circleId, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const content = { userId, nickName: user.nickName, circleId, time: Date.now() };\n      const circle = await Circle.findById(circleId);\n      const authorId = circle.userId;\n      const authorSocketId = await app.redis.get(SOCKET + authorId);\n      if (authorSocketId) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('comment', content);\n      } else {\n        await app.redis.rpush(MESSAGE + authorId, JSON.stringify({ type: 'comment', content }));\n      }\n      if (targetId) {\n        const targetSocketId = await app.redis.get(SOCKET + targetId);\n        if (targetSocketId) {\n          this.ctx.socket.nsp.sockets[targetSocketId].emit('reply', content);\n        } else {\n          await app.redis.rpush(MESSAGE + targetId, JSON.stringify({ type: 'reply', content }));\n        }\n      }\n    }\n\n    async answer(questionId) {\n      const question = await Question.findById(questionId);\n      const attentions = question.attentions;\n      const content = { questionId: question._id, title: question.title, time: Date.now() };\n      const userId = question.userId;\n      const authorSocketId = await app.redis.get(SOCKET + userId);\n      if (authorSocketId) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('answer', content);\n      } else {\n        await app.redis.rpush(MESSAGE + userId, JSON.stringify({ type: 'answer', content }));\n      }\n      attentions.forEach(async id => {\n        const socketId = await app.redis.get(SOCKET + id);\n        if (socketId) {\n          this.ctx.socket.nsp.sockets[socketId].emit('attention', content);\n        } else {\n          await app.redis.rpush(MESSAGE + id, JSON.stringify({ type: 'attention', content }));\n        }\n      });\n    }\n\n    async invite(userToken, expertId, questionId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const question = await Question.findById(questionId);\n      const content = { userId, nickName: user.nickName, questionId: question._id, title: question.title, time: Date.now() };\n      const expertSocketId = await app.redis.get(SOCKET + expertId);\n      if (expertSocketId) {\n        this.ctx.socket.nsp.sockets[expertSocketId].emit('invite', content);\n      } else {\n        await app.redis.rpush(MESSAGE + expertId, JSON.stringify({ type: 'invite', content }));\n      }\n    }\n\n    async follow(userToken, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const content = { userId, nickName: user.nickName, time: Date.now() };\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('follow', content);\n      } else {\n        await app.redis.rpush(MESSAGE + targetId, JSON.stringify({ type: 'follow', content }));\n      }\n    }\n\n    getUserId(token) {\n      return this.ctx.app.jwt.verify(token, '123456').userId;\n    }\n  }\n  return IOService;\n};\n"]}