{"version":3,"sources":["../../../app/service/io.js"],"names":["module","exports","SOCKET","MESSAGE","app","model","User","Question","Circle","Message","IOService","token","userId","getUserId","socketId","ctx","socket","id","redis","set","to","message","get","targetSocketId","nsp","sockets","emit","userToken","targetId","circleId","findById","user","myId","type","nickName","save","circle","authorId","authorSocketId","questionId","question","attentions","_id","title","rpush","forEach","expertId","expertSocketId","jwt","verify","Service"],"mappings":"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","file":"io.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const SOCKET = 'SOCKET';\n  const MESSAGE = 'MESSAGE';\n  const {\n    User,\n    Question,\n    Circle,\n    Message,\n  } = app.model;\n\n  class IOService extends app.Service {\n\n    /**\n     * 登录\n     * @param {String} token token\n     * @return {Promise<void>} id\n     */\n    async login(token) {\n      const userId = this.getUserId(token);\n      const socketId = this.ctx.socket.id;\n      await app.redis.set(SOCKET + userId, socketId);\n      return socketId;\n    }\n\n    async chat(to, message) {\n      // todo\n      const userId = '5a16699d5e58179af45247d0';\n      const targetSocketId = await app.redis.get(SOCKET + to);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', userId, message);\n      }\n    }\n\n    /**\n     * 点赞\n     * @param {String} userToken token\n     * @param {String} targetId 被赞的人id\n     * @param {String} circleId 动态id\n     */\n    async like(userToken, targetId, circleId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      await new Message({\n        myId: targetId,\n        type: 'like',\n        userId,\n        nickName: user.nickName,\n        circleId,\n      }).save();\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n          type: 'like',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        });\n      } else {\n        await app.redis.set(MESSAGE + targetId, '1');\n      }\n    }\n\n    /**\n     * 评论\n     * @param {String} userToken token\n     * @param {String} circleId 动态id\n     * @param {String} targetId 被评论的人id\n     */\n    async comment(userToken, circleId, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const circle = await Circle.findById(circleId);\n      const authorId = circle.userId;\n      await new Message({\n        myId: authorId,\n        type: 'comment',\n        userId,\n        nickName: user.nickName,\n        circleId,\n      }).save();\n      const authorSocketId = await app.redis.get(SOCKET + authorId);\n      if (authorSocketId) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('message', {\n          type: 'comment',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        });\n      } else {\n        await app.redis.set(MESSAGE + authorId, '1');\n      }\n      if (targetId) {\n        await new Message({\n          myId: targetId,\n          type: 'reply',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        }).save();\n        const targetSocketId = await app.redis.get(SOCKET + targetId);\n        if (targetSocketId) {\n          this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n            type: 'reply',\n            userId,\n            nickName: user.nickName,\n            circleId,\n          });\n        } else {\n          await app.redis.set(MESSAGE + targetId, '1');\n        }\n      }\n    }\n\n    /**\n     * 回答\n     * @param {String} userToken token\n     * @param {String} questionId 问题id\n     */\n    async answer(userToken, questionId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const question = await Question.findById(questionId);\n      const attentions = question.attentions;\n      const authorId = question.userId;\n      await new Message({\n        myId: authorId,\n        type: 'answer',\n        userId,\n        nickName: user.nickName,\n        questionId: question._id,\n        title: question.title,\n      }).save();\n      const authorSocketId = await app.redis.get(SOCKET + authorId);\n      if (authorSocketId) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('message', {\n          type: 'answer',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        });\n      } else {\n        await app.redis.rpush(MESSAGE + authorId, '1');\n      }\n      attentions.forEach(async id => {\n        await new Message({\n          myId: id,\n          type: 'attention',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        }).save();\n        const socketId = await app.redis.get(SOCKET + id);\n        if (socketId) {\n          this.ctx.socket.nsp.sockets[socketId].emit('message', {\n            type: 'attention',\n            userId,\n            nickName: user.nickName,\n            questionId: question._id,\n            title: question.title,\n          });\n        } else {\n          await app.redis.set(MESSAGE + id, '1');\n        }\n      });\n    }\n\n    /**\n     * 邀请回答\n     * @param {String} userToken token\n     * @param {String} expertId 专家id\n     * @param {String} questionId 问题id\n     */\n    async invite(userToken, expertId, questionId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const question = await Question.findById(questionId);\n      await new Message({\n        myId: expertId,\n        type: 'invite',\n        userId,\n        nickName: user.nickName,\n        questionId: question._id,\n        title: question.title,\n      }).save();\n      const expertSocketId = await app.redis.get(SOCKET + expertId);\n      if (expertSocketId) {\n        this.ctx.socket.nsp.sockets[expertSocketId].emit('message');\n      } else {\n        await app.redis.set(MESSAGE + expertId, '1');\n      }\n    }\n\n    /**\n     * 关注用户\n     * @param {String} userToken token\n     * @param {String} targetId 被关注的人id\n     */\n    async follow(userToken, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      await new Message({\n        myId: targetId,\n        type: 'follow',\n        userId,\n        nickName: user.nickName,\n      }).save();\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n          type: 'follow',\n          userId,\n          nickName: user.nickName,\n        });\n      } else {\n        await app.redis.set(MESSAGE + targetId, '1');\n      }\n    }\n\n    /**\n     * 从token中获取id\n     * @param {String} token token\n     * @return {String} userId 用户id\n     */\n    getUserId(token) {\n      return this.ctx.app.jwt.verify(token, '123456').userId;\n    }\n  }\n\n  return IOService;\n};\n"]}