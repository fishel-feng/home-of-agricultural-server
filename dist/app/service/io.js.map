{"version":3,"sources":["../../../app/service/io.js"],"names":["module","exports","SOCKET","MESSAGE","CHAT","RECENT","NEW_MESSAGE","app","model","User","Question","Circle","Message","Chat","IOService","token","userId","getUserId","socketId","ctx","socket","id","redis","set","get","hasNewMessage","emit","zcard","userCount","userToken","targetId","content","type","chatId","sender","save","zadd","Date","now","sadd","targetSocketId","nsp","sockets","srem","circleId","findById","user","myId","nickName","circle","authorId","authorSocketId","questionId","question","attentions","_id","title","rpush","expertId","expertSocketId","jwt","verify","Service"],"mappings":"AAAA;;;;;;;;;;;;AAEAA,OAAOC,OAAP,GAAiB,eAAO;AACtB,MAAMC,SAAS,QAAf;AACA,MAAMC,UAAU,SAAhB;AACA,MAAMC,OAAO,MAAb;AACA,MAAMC,SAAS,QAAf;AACA,MAAMC,cAAc,aAApB;AALsB,mBAYlBC,IAAIC,KAZc;AAAA,MAOpBC,IAPoB,cAOpBA,IAPoB;AAAA,MAQpBC,QARoB,cAQpBA,QARoB;AAAA,MASpBC,MAToB,cASpBA,MAToB;AAAA,MAUpBC,OAVoB,cAUpBA,OAVoB;AAAA,MAWpBC,IAXoB,cAWpBA,IAXoB;;AAAA,MAchBC,SAdgB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAgBpB;;;;AAhBoB;AAAA,4FAoBRC,KApBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBZC,wBArBY,GAqBH,KAAKC,SAAL,CAAeF,KAAf,CArBG;AAsBZG,0BAtBY,GAsBD,KAAKC,GAAL,CAASC,MAAT,CAAgBC,EAtBf;AAAA;AAAA,yBAuBZd,IAAIe,KAAJ,CAAUC,GAAV,CAAcrB,SAASc,MAAvB,EAA+BE,QAA/B,CAvBY;;AAAA;AAAA;AAAA,yBAwBYX,IAAIe,KAAJ,CAAUE,GAAV,CAAc,YAAYR,MAA1B,CAxBZ;;AAAA;AAwBZS,+BAxBY;;AAyBlB,sBAAIA,aAAJ,EAAmB;AACjB,yBAAKN,GAAL,CAASC,MAAT,CAAgBM,IAAhB,CAAqB,SAArB;AACD;AA3BiB;AAAA,yBA4BMnB,IAAIe,KAAJ,CAAUK,KAAV,CAAgBvB,OAAOY,MAAvB,CA5BN;;AAAA;AA4BZY,2BA5BY;;AA6BlB,sBAAIA,SAAJ,EAAe;AACb,yBAAKT,GAAL,CAASC,MAAT,CAAgBM,IAAhB,CAAqB,MAArB,EAA6BE,SAA7B;AACD;;AA/BiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAkCpB;;;;;;;;AAlCoB;AAAA;AAAA;AAAA,8FAyCTC,SAzCS,EAyCEC,QAzCF,EAyCYC,OAzCZ,EAyCqBC,IAzCrB;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CZhB,wBA1CY,GA0CH,KAAKC,SAAL,CAAeY,SAAf,CA1CG;AA2CZI,wBA3CY,GA2CHH,WAAWd,MAAX,GAAoBc,WAAWd,MAA/B,GAAwCA,SAASc,QA3C9C;AAAA;AAAA,yBA4CZ,IAAIjB,IAAJ,CAAS;AACboB,kCADa;AAEbD,8BAFa;AAGbD,oCAHa;AAIbG,4BAAQlB;AAJK,mBAAT,EAKHmB,IALG,EA5CY;;AAAA;AAAA;AAAA,yBAkDZ5B,IAAIe,KAAJ,CAAUc,IAAV,CAAe/B,SAASyB,QAAxB,EAAkCO,KAAKC,GAAL,EAAlC,EAA8CtB,MAA9C,CAlDY;;AAAA;AAAA;AAAA,yBAmDZT,IAAIe,KAAJ,CAAUiB,IAAV,CAAejC,cAAcwB,QAA7B,EAAuCd,MAAvC,CAnDY;;AAAA;AAAA;AAAA,yBAoDZT,IAAIe,KAAJ,CAAUc,IAAV,CAAe/B,SAASW,MAAxB,EAAgCqB,KAAKC,GAAL,EAAhC,EAA4CR,QAA5C,CApDY;;AAAA;AAAA;AAAA,yBAqDWvB,IAAIe,KAAJ,CAAUE,GAAV,CAActB,SAAS4B,QAAvB,CArDX;;AAAA;AAqDZU,gCArDY;;AAAA,wBAsDdA,kBAAkB,KAAKrB,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BF,cAA5B,CAtDJ;AAAA;AAAA;AAAA;;AAuDhB,uBAAKrB,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BF,cAA5B,EAA4Cd,IAA5C,CAAiD,MAAjD,EAAyD;AACvDM,8BADuD;AAEvDD,oCAFuD;AAGvDG,4BAAQlB;AAH+C,mBAAzD;AAvDgB;AAAA;;AAAA;AAAA;AAAA,yBA6DVT,IAAIe,KAAJ,CAAUiB,IAAV,CAAenC,OAAO0B,QAAtB,EAAgCG,MAAhC,CA7DU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAiEpB;;;;;;AAjEoB;AAAA;AAAA;AAAA,8FAsETJ,SAtES,EAsEEC,QAtEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAuEZd,wBAvEY,GAuEH,KAAKC,SAAL,CAAeY,SAAf,CAvEG;AAAA;AAAA,yBAwEZtB,IAAIe,KAAJ,CAAUqB,IAAV,CAAerC,cAAcU,MAA7B,EAAqCc,QAArC,CAxEY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA2EpB;;;;;;;AA3EoB;AAAA;AAAA;AAAA,8FAiFTD,SAjFS,EAiFEC,QAjFF,EAiFYc,QAjFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAkFZ5B,wBAlFY,GAkFH,KAAKC,SAAL,CAAeY,SAAf,CAlFG;AAAA;AAAA,yBAmFCpB,KAAKoC,QAAL,CAAc7B,MAAd,CAnFD;;AAAA;AAmFZ8B,sBAnFY;AAAA;AAAA,yBAoFZ,IAAIlC,OAAJ,CAAY;AAChBmC,0BAAMjB,QADU;AAEhBE,0BAAM,MAFU;AAGhBhB,kCAHgB;AAIhBgC,8BAAUF,KAAKE,QAJC;AAKhBJ;AALgB,mBAAZ,EAMHT,IANG,EApFY;;AAAA;AAAA;AAAA,yBA2FW5B,IAAIe,KAAJ,CAAUE,GAAV,CAActB,SAAS4B,QAAvB,CA3FX;;AAAA;AA2FZU,gCA3FY;;AAAA,wBA4FdA,kBAAkB,KAAKrB,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BF,cAA5B,CA5FJ;AAAA;AAAA;AAAA;;AA6FhB,uBAAKrB,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BF,cAA5B,EAA4Cd,IAA5C,CAAiD,SAAjD,EAA4D;AAC1DM,0BAAM,MADoD;AAE1DhB,kCAF0D;AAG1DgC,8BAAUF,KAAKE,QAH2C;AAI1DJ;AAJ0D,mBAA5D;AA7FgB;AAAA;;AAAA;AAAA;AAAA,yBAoGVrC,IAAIe,KAAJ,CAAUC,GAAV,CAAcpB,UAAU2B,QAAxB,EAAkC,GAAlC,CApGU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAwGpB;;;;;;;AAxGoB;AAAA;AAAA;AAAA,8FA8GND,SA9GM,EA8GKe,QA9GL,EA8Ged,QA9Gf;AAAA;AAAA;AAAA;AAAA;AAAA;AA+GZd,wBA/GY,GA+GH,KAAKC,SAAL,CAAeY,SAAf,CA/GG;AAAA;AAAA,yBAgHCpB,KAAKoC,QAAL,CAAc7B,MAAd,CAhHD;;AAAA;AAgHZ8B,sBAhHY;AAAA;AAAA,yBAiHGnC,OAAOkC,QAAP,CAAgBD,QAAhB,CAjHH;;AAAA;AAiHZK,wBAjHY;AAkHZC,0BAlHY,GAkHDD,OAAOjC,MAlHN;AAAA;AAAA,yBAmHZ,IAAIJ,OAAJ,CAAY;AAChBmC,0BAAMG,QADU;AAEhBlB,0BAAM,SAFU;AAGhBhB,kCAHgB;AAIhBgC,8BAAUF,KAAKE,QAJC;AAKhBJ;AALgB,mBAAZ,EAMHT,IANG,EAnHY;;AAAA;AAAA;AAAA,yBA0HW5B,IAAIe,KAAJ,CAAUE,GAAV,CAActB,SAASgD,QAAvB,CA1HX;;AAAA;AA0HZC,gCA1HY;;AAAA,wBA2HdA,kBAAkB,KAAKhC,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BS,cAA5B,CA3HJ;AAAA;AAAA;AAAA;;AA4HhB,uBAAKhC,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BS,cAA5B,EAA4CzB,IAA5C,CAAiD,SAAjD,EAA4D;AAC1DM,0BAAM,SADoD;AAE1DhB,kCAF0D;AAG1DgC,8BAAUF,KAAKE,QAH2C;AAI1DJ;AAJ0D,mBAA5D;AA5HgB;AAAA;;AAAA;AAAA;AAAA,yBAmIVrC,IAAIe,KAAJ,CAAUC,GAAV,CAAcpB,UAAU+C,QAAxB,EAAkC,GAAlC,CAnIU;;AAAA;AAAA,uBAqIdpB,QArIc;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAsIV,IAAIlB,OAAJ,CAAY;AAChBmC,0BAAMjB,QADU;AAEhBE,0BAAM,OAFU;AAGhBhB,kCAHgB;AAIhBgC,8BAAUF,KAAKE,QAJC;AAKhBJ;AALgB,mBAAZ,EAMHT,IANG,EAtIU;;AAAA;AAAA;AAAA,yBA6Ia5B,IAAIe,KAAJ,CAAUE,GAAV,CAActB,SAAS4B,QAAvB,CA7Ib;;AAAA;AA6IVU,gCA7IU;;AAAA,wBA8IZA,kBAAkB,KAAKrB,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BF,cAA5B,CA9IN;AAAA;AAAA;AAAA;;AA+Id,uBAAKrB,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BF,cAA5B,EAA4Cd,IAA5C,CAAiD,SAAjD,EAA4D;AAC1DM,0BAAM,OADoD;AAE1DhB,kCAF0D;AAG1DgC,8BAAUF,KAAKE,QAH2C;AAI1DJ;AAJ0D,mBAA5D;AA/Ic;AAAA;;AAAA;AAAA;AAAA,yBAsJRrC,IAAIe,KAAJ,CAAUC,GAAV,CAAcpB,UAAU2B,QAAxB,EAAkC,GAAlC,CAtJQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA2JpB;;;;;;AA3JoB;AAAA;AAAA;AAAA,8FAgKPD,SAhKO,EAgKIuB,UAhKJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiKZpC,wBAjKY,GAiKH,KAAKC,SAAL,CAAeY,SAAf,CAjKG;AAAA;AAAA,yBAkKCpB,KAAKoC,QAAL,CAAc7B,MAAd,CAlKD;;AAAA;AAkKZ8B,sBAlKY;AAAA;AAAA,yBAmKKpC,SAASmC,QAAT,CAAkBO,UAAlB,CAnKL;;AAAA;AAmKZC,0BAnKY;AAoKZC,4BApKY,GAoKCD,SAASC,UApKV;AAqKZJ,0BArKY,GAqKDG,SAASrC,MArKR;AAAA;AAAA,yBAsKZ,IAAIJ,OAAJ,CAAY;AAChBmC,0BAAMG,QADU;AAEhBlB,0BAAM,QAFU;AAGhBhB,kCAHgB;AAIhBgC,8BAAUF,KAAKE,QAJC;AAKhBI,gCAAYC,SAASE,GALL;AAMhBC,2BAAOH,SAASG;AANA,mBAAZ,EAOHrB,IAPG,EAtKY;;AAAA;AAAA;AAAA,yBA8KW5B,IAAIe,KAAJ,CAAUE,GAAV,CAActB,SAASgD,QAAvB,CA9KX;;AAAA;AA8KZC,gCA9KY;;AAAA,wBA+KdA,kBAAkB,KAAKhC,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BS,cAA5B,CA/KJ;AAAA;AAAA;AAAA;;AAgLhB,uBAAKhC,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BS,cAA5B,EAA4CzB,IAA5C,CAAiD,SAAjD,EAA4D;AAC1DM,0BAAM,QADoD;AAE1DhB,kCAF0D;AAG1DgC,8BAAUF,KAAKE,QAH2C;AAI1DI,gCAAYC,SAASE,GAJqC;AAK1DC,2BAAOH,SAASG;AAL0C,mBAA5D;AAhLgB;AAAA;;AAAA;AAAA;AAAA,yBAwLVjD,IAAIe,KAAJ,CAAUmC,KAAV,CAAgBtD,UAAU+C,QAA1B,EAAoC,GAApC,CAxLU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BA0LDI,UA1LC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0LPjC,oBA1LO;AAAA;AAAA,yBA2LV,IAAIT,OAAJ,CAAY;AAChBmC,0BAAM1B,EADU;AAEhBW,0BAAM,WAFU;AAGhBhB,kCAHgB;AAIhBgC,8BAAUF,KAAKE,QAJC;AAKhBI,gCAAYC,SAASE,GALL;AAMhBC,2BAAOH,SAASG;AANA,mBAAZ,EAOHrB,IAPG,EA3LU;;AAAA;AAAA;AAAA,yBAmMO5B,IAAIe,KAAJ,CAAUE,GAAV,CAActB,SAASmB,EAAvB,CAnMP;;AAAA;AAmMVH,0BAnMU;;AAAA,wBAoMZA,YAAY,KAAKC,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BxB,QAA5B,CApMA;AAAA;AAAA;AAAA;;AAqMd,uBAAKC,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BxB,QAA5B,EAAsCQ,IAAtC,CAA2C,SAA3C,EAAsD;AACpDM,0BAAM,WAD8C;AAEpDhB,kCAFoD;AAGpDgC,8BAAUF,KAAKE,QAHqC;AAIpDI,gCAAYC,SAASE,GAJ+B;AAKpDC,2BAAOH,SAASG;AALoC,mBAAtD;AArMc;AAAA;;AAAA;AAAA;AAAA,yBA6MRjD,IAAIe,KAAJ,CAAUC,GAAV,CAAcpB,UAAUkB,EAAxB,EAA4B,GAA5B,CA7MQ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAkNpB;;;;;;;AAlNoB;AAAA;AAAA;AAAA,8FAwNPQ,SAxNO,EAwNI6B,QAxNJ,EAwNcN,UAxNd;AAAA;AAAA;AAAA;AAAA;AAAA;AAyNZpC,wBAzNY,GAyNH,KAAKC,SAAL,CAAeY,SAAf,CAzNG;AAAA;AAAA,yBA0NCpB,KAAKoC,QAAL,CAAc7B,MAAd,CA1ND;;AAAA;AA0NZ8B,sBA1NY;AAAA;AAAA,yBA2NKpC,SAASmC,QAAT,CAAkBO,UAAlB,CA3NL;;AAAA;AA2NZC,0BA3NY;AAAA;AAAA,yBA4NZ,IAAIzC,OAAJ,CAAY;AAChBmC,0BAAMW,QADU;AAEhB1B,0BAAM,QAFU;AAGhBhB,kCAHgB;AAIhBgC,8BAAUF,KAAKE,QAJC;AAKhBI,gCAAYC,SAASE,GALL;AAMhBC,2BAAOH,SAASG;AANA,mBAAZ,EAOHrB,IAPG,EA5NY;;AAAA;AAAA;AAAA,yBAoOW5B,IAAIe,KAAJ,CAAUE,GAAV,CAActB,SAASwD,QAAvB,CApOX;;AAAA;AAoOZC,gCApOY;;AAAA,wBAqOdA,kBAAkB,KAAKxC,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BiB,cAA5B,CArOJ;AAAA;AAAA;AAAA;;AAsOhB,uBAAKxC,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BiB,cAA5B,EAA4CjC,IAA5C,CAAiD,SAAjD,EAA4D;AAC1DM,0BAAM,QADoD;AAE1DhB,kCAF0D;AAG1DgC,8BAAUF,KAAKE,QAH2C;AAI1DI,gCAAYC,SAASE,GAJqC;AAK1DC,2BAAOH,SAASG;AAL0C,mBAA5D;AAtOgB;AAAA;;AAAA;AAAA;AAAA,yBA8OVjD,IAAIe,KAAJ,CAAUC,GAAV,CAAcpB,UAAUuD,QAAxB,EAAkC,GAAlC,CA9OU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAkPpB;;;;;;AAlPoB;AAAA;AAAA;AAAA,8FAuPP7B,SAvPO,EAuPIC,QAvPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAwPZd,wBAxPY,GAwPH,KAAKC,SAAL,CAAeY,SAAf,CAxPG;AAAA;AAAA,yBAyPCpB,KAAKoC,QAAL,CAAc7B,MAAd,CAzPD;;AAAA;AAyPZ8B,sBAzPY;AAAA;AAAA,yBA0PZ,IAAIlC,OAAJ,CAAY;AAChBmC,0BAAMjB,QADU;AAEhBE,0BAAM,QAFU;AAGhBhB,kCAHgB;AAIhBgC,8BAAUF,KAAKE;AAJC,mBAAZ,EAKHb,IALG,EA1PY;;AAAA;AAAA;AAAA,yBAgQW5B,IAAIe,KAAJ,CAAUE,GAAV,CAActB,SAAS4B,QAAvB,CAhQX;;AAAA;AAgQZU,gCAhQY;;AAAA,wBAiQdA,kBAAkB,KAAKrB,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BF,cAA5B,CAjQJ;AAAA;AAAA;AAAA;;AAkQhB,uBAAKrB,GAAL,CAASC,MAAT,CAAgBqB,GAAhB,CAAoBC,OAApB,CAA4BF,cAA5B,EAA4Cd,IAA5C,CAAiD,SAAjD,EAA4D;AAC1DM,0BAAM,QADoD;AAE1DhB,kCAF0D;AAG1DgC,8BAAUF,KAAKE;AAH2C,mBAA5D;AAlQgB;AAAA;;AAAA;AAAA;AAAA,yBAwQVzC,IAAIe,KAAJ,CAAUC,GAAV,CAAcpB,UAAU2B,QAAxB,EAAkC,GAAlC,CAxQU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA4QpB;;;;;;AA5QoB;AAAA;AAAA,gCAiRVf,KAjRU,EAiRH;AACf,eAAO,KAAKI,GAAL,CAASZ,GAAT,CAAaqD,GAAb,CAAiBC,MAAjB,CAAwB9C,KAAxB,EAA+B,QAA/B,EAAyCC,MAAhD;AACD;AAnRmB;;AAAA;AAAA,IAcET,IAAIuD,OAdN;;AAsRtB,SAAOhD,SAAP;AACD,CAvRD","file":"io.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const SOCKET = 'SOCKET';\n  const MESSAGE = 'MESSAGE';\n  const CHAT = 'CHAT';\n  const RECENT = 'RECENT';\n  const NEW_MESSAGE = 'NEW_MESSAGE';\n  const {\n    User,\n    Question,\n    Circle,\n    Message,\n    Chat,\n  } = app.model;\n\n  class IOService extends app.Service {\n\n    /**\n     * 登录\n     * @param {String} token token\n     */\n    async login(token) {\n      const userId = this.getUserId(token);\n      const socketId = this.ctx.socket.id;\n      await app.redis.set(SOCKET + userId, socketId);\n      const hasNewMessage = !!await app.redis.get('MESSAGE' + userId);\n      if (hasNewMessage) {\n        this.ctx.socket.emit('message');\n      }\n      const userCount = await app.redis.zcard(CHAT + userId);\n      if (userCount) {\n        this.ctx.socket.emit('chat', userCount);\n      }\n    }\n\n    /**\n     * 聊天消息\n     * @param {String} userToken token\n     * @param {String} targetId 发往id\n     * @param {String} content 消息内容\n     * @param {String} type 消息类型\n     */\n    async chat(userToken, targetId, content, type) {\n      const userId = this.getUserId(userToken);\n      const chatId = targetId < userId ? targetId + userId : userId + targetId;\n      await new Chat({\n        chatId,\n        type,\n        content,\n        sender: userId,\n      }).save();\n      await app.redis.zadd(RECENT + targetId, Date.now(), userId);\n      await app.redis.sadd(NEW_MESSAGE + targetId, userId);\n      await app.redis.zadd(RECENT + userId, Date.now(), targetId);\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId && this.ctx.socket.nsp.sockets[targetSocketId]) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('chat', {\n          type,\n          content,\n          sender: userId,\n        });\n      } else {\n        await app.redis.sadd(CHAT + targetId, chatId);\n      }\n    }\n\n    /**\n     * 消息已读\n     * @param {String} userToken token\n     * @param {String} targetId 消息作者\n     */\n    async read(userToken, targetId) {\n      const userId = this.getUserId(userToken);\n      await app.redis.srem(NEW_MESSAGE + userId, targetId);\n    }\n\n    /**\n     * 点赞\n     * @param {String} userToken token\n     * @param {String} targetId 被赞的人id\n     * @param {String} circleId 动态id\n     */\n    async like(userToken, targetId, circleId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      await new Message({\n        myId: targetId,\n        type: 'like',\n        userId,\n        nickName: user.nickName,\n        circleId,\n      }).save();\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId && this.ctx.socket.nsp.sockets[targetSocketId]) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n          type: 'like',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        });\n      } else {\n        await app.redis.set(MESSAGE + targetId, '1');\n      }\n    }\n\n    /**\n     * 评论\n     * @param {String} userToken token\n     * @param {String} circleId 动态id\n     * @param {String} targetId 被评论的人id\n     */\n    async comment(userToken, circleId, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const circle = await Circle.findById(circleId);\n      const authorId = circle.userId;\n      await new Message({\n        myId: authorId,\n        type: 'comment',\n        userId,\n        nickName: user.nickName,\n        circleId,\n      }).save();\n      const authorSocketId = await app.redis.get(SOCKET + authorId);\n      if (authorSocketId && this.ctx.socket.nsp.sockets[authorSocketId]) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('message', {\n          type: 'comment',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        });\n      } else {\n        await app.redis.set(MESSAGE + authorId, '1');\n      }\n      if (targetId) {\n        await new Message({\n          myId: targetId,\n          type: 'reply',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        }).save();\n        const targetSocketId = await app.redis.get(SOCKET + targetId);\n        if (targetSocketId && this.ctx.socket.nsp.sockets[targetSocketId]) {\n          this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n            type: 'reply',\n            userId,\n            nickName: user.nickName,\n            circleId,\n          });\n        } else {\n          await app.redis.set(MESSAGE + targetId, '1');\n        }\n      }\n    }\n\n    /**\n     * 回答\n     * @param {String} userToken token\n     * @param {String} questionId 问题id\n     */\n    async answer(userToken, questionId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const question = await Question.findById(questionId);\n      const attentions = question.attentions;\n      const authorId = question.userId;\n      await new Message({\n        myId: authorId,\n        type: 'answer',\n        userId,\n        nickName: user.nickName,\n        questionId: question._id,\n        title: question.title,\n      }).save();\n      const authorSocketId = await app.redis.get(SOCKET + authorId);\n      if (authorSocketId && this.ctx.socket.nsp.sockets[authorSocketId]) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('message', {\n          type: 'answer',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        });\n      } else {\n        await app.redis.rpush(MESSAGE + authorId, '1');\n      }\n      for (const id of attentions) {\n        await new Message({\n          myId: id,\n          type: 'attention',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        }).save();\n        const socketId = await app.redis.get(SOCKET + id);\n        if (socketId && this.ctx.socket.nsp.sockets[socketId]) {\n          this.ctx.socket.nsp.sockets[socketId].emit('message', {\n            type: 'attention',\n            userId,\n            nickName: user.nickName,\n            questionId: question._id,\n            title: question.title,\n          });\n        } else {\n          await app.redis.set(MESSAGE + id, '1');\n        }\n      }\n    }\n\n    /**\n     * 邀请回答\n     * @param {String} userToken token\n     * @param {String} expertId 专家id\n     * @param {String} questionId 问题id\n     */\n    async invite(userToken, expertId, questionId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const question = await Question.findById(questionId);\n      await new Message({\n        myId: expertId,\n        type: 'invite',\n        userId,\n        nickName: user.nickName,\n        questionId: question._id,\n        title: question.title,\n      }).save();\n      const expertSocketId = await app.redis.get(SOCKET + expertId);\n      if (expertSocketId && this.ctx.socket.nsp.sockets[expertSocketId]) {\n        this.ctx.socket.nsp.sockets[expertSocketId].emit('message', {\n          type: 'invite',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        });\n      } else {\n        await app.redis.set(MESSAGE + expertId, '1');\n      }\n    }\n\n    /**\n     * 关注用户\n     * @param {String} userToken token\n     * @param {String} targetId 被关注的人id\n     */\n    async follow(userToken, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      await new Message({\n        myId: targetId,\n        type: 'follow',\n        userId,\n        nickName: user.nickName,\n      }).save();\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId && this.ctx.socket.nsp.sockets[targetSocketId]) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n          type: 'follow',\n          userId,\n          nickName: user.nickName,\n        });\n      } else {\n        await app.redis.set(MESSAGE + targetId, '1');\n      }\n    }\n\n    /**\n     * 从token中获取id\n     * @param {String} token token\n     * @return {String} userId 用户id\n     */\n    getUserId(token) {\n      return this.ctx.app.jwt.verify(token, '123456').userId;\n    }\n  }\n\n  return IOService;\n};\n"]}