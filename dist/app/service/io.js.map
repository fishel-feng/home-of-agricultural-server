{"version":3,"sources":["../../../app/service/io.js"],"names":["module","exports","SOCKET","MESSAGE","CHAT","RECENT","NEW_MESSAGE","app","model","User","Question","Circle","Message","Chat","IOService","token","userId","getUserId","socketId","ctx","socket","id","redis","set","get","hasNewMessage","emit","del","scard","userCount","userToken","targetId","content","type","chatId","sender","save","zadd","Date","now","sadd","targetSocketId","nsp","sockets","srem","circleId","findById","user","myId","nickName","circle","authorId","authorSocketId","questionId","question","attentions","_id","title","expertId","expertSocketId","jwt","verify","Service"],"mappings":"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","file":"io.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const SOCKET = 'SOCKET';\n  const MESSAGE = 'MESSAGE';\n  const CHAT = 'CHAT';\n  const RECENT = 'RECENT';\n  const NEW_MESSAGE = 'NEW_MESSAGE';\n  const {\n    User,\n    Question,\n    Circle,\n    Message,\n    Chat,\n  } = app.model;\n\n  class IOService extends app.Service {\n\n    /**\n     * 登录\n     * @param {String} token token\n     */\n    async login(token) {\n      const userId = this.getUserId(token);\n      const socketId = this.ctx.socket.id;\n      await app.redis.set(SOCKET + userId, socketId);\n      const hasNewMessage = !!await app.redis.get(MESSAGE + userId);\n      if (hasNewMessage) {\n        this.ctx.socket.emit('message');\n        await app.redis.del(MESSAGE + userId);\n      }\n      const userCount = await app.redis.scard(CHAT + userId);\n      if (userCount) {\n        this.ctx.socket.emit('chatMessage', userCount);\n        await app.redis.del(CHAT + userId);\n      }\n    }\n\n    /**\n     * 聊天消息\n     * @param {String} userToken token\n     * @param {String} targetId 发往id\n     * @param {String} content 消息内容\n     * @param {String} type 消息类型\n     */\n    async chat(userToken, targetId, content, type) {\n      const userId = this.getUserId(userToken);\n      const chatId = targetId < userId ? targetId + userId : userId + targetId;\n      await new Chat({\n        chatId,\n        type,\n        content,\n        sender: userId,\n      }).save();\n      await app.redis.zadd(RECENT + targetId, Date.now(), userId);\n      await app.redis.sadd(NEW_MESSAGE + targetId, userId);\n      await app.redis.zadd(RECENT + userId, Date.now(), targetId);\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId && this.ctx.socket.nsp.sockets[targetSocketId]) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('chat', {\n          type,\n          content,\n          sender: userId,\n        });\n      } else {\n        await app.redis.sadd(CHAT + targetId, chatId);\n      }\n    }\n\n    /**\n     * 消息已读\n     * @param {String} userToken token\n     * @param {String} targetId 消息作者\n     */\n    async read(userToken, targetId) {\n      const userId = this.getUserId(userToken);\n      await app.redis.srem(NEW_MESSAGE + userId, targetId);\n    }\n\n    /**\n     * 点赞\n     * @param {String} userToken token\n     * @param {String} targetId 被赞的人id\n     * @param {String} circleId 动态id\n     */\n    async like(userToken, targetId, circleId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      await new Message({\n        myId: targetId,\n        type: 'like',\n        userId,\n        nickName: user.nickName,\n        circleId,\n      }).save();\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId && this.ctx.socket.nsp.sockets[targetSocketId]) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n          type: 'like',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        });\n      } else {\n        await app.redis.set(MESSAGE + targetId, '1');\n      }\n    }\n\n    /**\n     * 评论\n     * @param {String} userToken token\n     * @param {String} circleId 动态id\n     * @param {String} targetId 被评论的人id\n     */\n    async comment(userToken, circleId, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const circle = await Circle.findById(circleId);\n      const authorId = circle.userId;\n      await new Message({\n        myId: authorId,\n        type: 'comment',\n        userId,\n        nickName: user.nickName,\n        circleId,\n      }).save();\n      const authorSocketId = await app.redis.get(SOCKET + authorId);\n      if (authorSocketId && this.ctx.socket.nsp.sockets[authorSocketId]) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('message', {\n          type: 'comment',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        });\n      } else {\n        await app.redis.set(MESSAGE + authorId, '1');\n      }\n      if (targetId) {\n        await new Message({\n          myId: targetId,\n          type: 'reply',\n          userId,\n          nickName: user.nickName,\n          circleId,\n        }).save();\n        const targetSocketId = await app.redis.get(SOCKET + targetId);\n        if (targetSocketId && this.ctx.socket.nsp.sockets[targetSocketId]) {\n          this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n            type: 'reply',\n            userId,\n            nickName: user.nickName,\n            circleId,\n          });\n        } else {\n          await app.redis.set(MESSAGE + targetId, '1');\n        }\n      }\n    }\n\n    /**\n     * 回答\n     * @param {String} userToken token\n     * @param {String} questionId 问题id\n     */\n    async answer(userToken, questionId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const question = await Question.findById(questionId);\n      const attentions = question.attentions;\n      const authorId = question.userId;\n      await new Message({\n        myId: authorId,\n        type: 'answer',\n        userId,\n        nickName: user.nickName,\n        questionId: question._id,\n        title: question.title,\n      }).save();\n      const authorSocketId = await app.redis.get(SOCKET + authorId);\n      if (authorSocketId && this.ctx.socket.nsp.sockets[authorSocketId]) {\n        this.ctx.socket.nsp.sockets[authorSocketId].emit('message', {\n          type: 'answer',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        });\n      } else {\n        await app.redis.set(MESSAGE + authorId, '1');\n      }\n      for (const id of attentions) {\n        await new Message({\n          myId: id,\n          type: 'attention',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        }).save();\n        const socketId = await app.redis.get(SOCKET + id);\n        if (socketId && this.ctx.socket.nsp.sockets[socketId]) {\n          this.ctx.socket.nsp.sockets[socketId].emit('message', {\n            type: 'attention',\n            userId,\n            nickName: user.nickName,\n            questionId: question._id,\n            title: question.title,\n          });\n        } else {\n          await app.redis.set(MESSAGE + id, '1');\n        }\n      }\n    }\n\n    /**\n     * 邀请回答\n     * @param {String} userToken token\n     * @param {String} expertId 专家id\n     * @param {String} questionId 问题id\n     */\n    async invite(userToken, expertId, questionId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      const question = await Question.findById(questionId);\n      await new Message({\n        myId: expertId,\n        type: 'invite',\n        userId,\n        nickName: user.nickName,\n        questionId: question._id,\n        title: question.title,\n      }).save();\n      const expertSocketId = await app.redis.get(SOCKET + expertId);\n      if (expertSocketId && this.ctx.socket.nsp.sockets[expertSocketId]) {\n        this.ctx.socket.nsp.sockets[expertSocketId].emit('message', {\n          type: 'invite',\n          userId,\n          nickName: user.nickName,\n          questionId: question._id,\n          title: question.title,\n        });\n      } else {\n        await app.redis.set(MESSAGE + expertId, '1');\n      }\n    }\n\n    /**\n     * 关注用户\n     * @param {String} userToken token\n     * @param {String} targetId 被关注的人id\n     */\n    async follow(userToken, targetId) {\n      const userId = this.getUserId(userToken);\n      const user = await User.findById(userId);\n      await new Message({\n        myId: targetId,\n        type: 'follow',\n        userId,\n        nickName: user.nickName,\n      }).save();\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId && this.ctx.socket.nsp.sockets[targetSocketId]) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', {\n          type: 'follow',\n          userId,\n          nickName: user.nickName,\n        });\n      } else {\n        await app.redis.set(MESSAGE + targetId, '1');\n      }\n    }\n\n    /**\n     * 从token中获取id\n     * @param {String} token token\n     * @return {String} userId 用户id\n     */\n    getUserId(token) {\n      return this.ctx.app.jwt.verify(token, '123456').userId;\n    }\n  }\n\n  return IOService;\n};\n"]}