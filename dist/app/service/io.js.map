{"version":3,"sources":["../../../app/service/io.js"],"names":["module","exports","SOCKET","User","app","model","IOService","token","userId","ctx","jwt","verify","socketId","socket","id","redis","set","to","message","get","targetSocketId","nsp","sockets","emit","userToken","targetId","findById","userInfo","circleId","questionId","expertId","Service"],"mappings":"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","file":"io.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const SOCKET = 'SOCKET';\n  const {\n    User,\n  } = app.model;\n  class IOService extends app.Service {\n\n    /**\n     * 登录\n     * @param {String} token token\n     * @return {Promise<void>} id\n     */\n    async login(token) {\n      const userId = this.ctx.app.jwt.verify(token, '123456').userId;\n      const socketId = this.ctx.socket.id;\n      await app.redis.set(SOCKET + userId, socketId);\n      return socketId;\n    }\n\n    async chat(to, message) {\n      const userId = '5a16699d5e58179af45247d0';\n      const targetSocketId = await app.redis.get(SOCKET + to);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('message', userId, message);\n      }\n    }\n\n    async like(userToken, targetId) {\n      const userId = this.ctx.app.jwt.verify(userToken, '123456').userId;\n      const userInfo = await User.findById(userId);\n      // todo\n      const targetSocketId = await app.redis.get(SOCKET + targetId);\n      if (targetSocketId) {\n        this.ctx.socket.nsp.sockets[targetSocketId].emit('like', userInfo);\n      }\n    }\n\n    async comment(userToken, circleId, targetId) {\n      // todo\n    }\n\n    async answer(questionId) {\n      // todo\n    }\n\n    async invitation(userToken, expertId, questionId) {\n      // todo\n    }\n\n    async follow(userToken, targetId) {\n      // todo\n    }\n  }\n  return IOService;\n};\n"]}