{"version":3,"sources":["../../../app/service/circle.js"],"names":["module","exports","app","model","Circle","User","PAGE_SIZE","CircleService","content","images","user","ctx","userId","_id","nickName","headImage","save","circle","update","$inc","circleCount","Error","circleId","remove","res","result","n","targetId","findById","targetName","targetUser","findByIdAndUpdate","count","commentCount","$push","comments","id","commentId","$pull","nModified","likes","forEach","element","description","certification","likeCount","last","followings","followingIds","push","e","find","$in","time","$lt","sort","limit","exec","likeList","Service"],"mappings":"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","file":"circle.js","sourcesContent":["'use strict';\n\nmodule.exports = app => {\n  const {\n    Circle,\n    User,\n  } = app.model;\n  const PAGE_SIZE = 30;\n  class CircleService extends app.Service {\n\n    /**\n     * 发表动态\n     * @param {String} content 文本内容\n     * @param {String} images 图片地址\n     * @return {*} 动态详情数据\n     */\n    async addCircle(content, images) {\n      const user = this.ctx.user;\n      try {\n        const circle = await new Circle({\n          content,\n          images,\n          userId: user._id,\n          nickName: user.nickName,\n          headImage: user.headImage,\n        }).save();\n        await User.update({\n          _id: user._id,\n        }, {\n          $inc: {\n            circleCount: 1,\n          },\n        });\n        return {\n          circle,\n        };\n      } catch (e) {\n        throw new Error('ADD_CIRCLE_ERROR');\n      }\n    }\n\n    /**\n     * 删除动态\n     * @param {String} circleId 内容id\n     * @return {*} 成功状态\n     */\n    async deleteCircle(circleId) {\n      try {\n        const res = await Circle.remove({\n          _id: circleId,\n          userId: this.ctx.user._id,\n        });\n        if (res.result.n !== '1') {\n          throw new Error();\n        }\n        await User.update({\n          _id: this.ctx.user._id,\n        }, {\n          $inc: {\n            circleCount: -1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('DELETE_CIRCLE_ERROR');\n      }\n    }\n\n    /**\n     * 添加评论\n     * @param {String} circleId 内容id\n     * @param {String} content 内容\n     * @param {String} targetId 目标用户id\n     * @return {*} 评论信息\n     */\n    async addComment(circleId, content, targetId) {\n      const user = this.ctx.user;\n      try {\n        const circle = await Circle.findById(circleId);\n        let targetName;\n        if (targetId) {\n          const targetUser = await User.findById(targetId, 'nickName');\n          targetName = targetUser.nickName;\n        }\n        await Circle.findByIdAndUpdate(circleId, {\n          $inc: {\n            count: 1,\n            commentCount: 1,\n          },\n          $push: {\n            comments: {\n              _id: circle.count + 1,\n              content,\n              userId: user._id,\n              nickName: user.nickName,\n              headImage: user.headImage,\n              targetId,\n              targetName,\n            },\n          },\n        });\n        const result = await Circle.findById(circleId, 'comments');\n        return result.comments.id(circle.count + 1);\n      } catch (e) {\n        throw new Error('ADD_COMMENT_ERROR');\n      }\n    }\n\n    /**\n     * 删除评论\n     * @param {String} circleId 内容id\n     * @param {String} commentId 评论id\n     * @return {*} 评论信息\n     */\n    async deleteComment(circleId, commentId) {\n      try {\n        const res = await Circle.update({\n          _id: circleId,\n        }, {\n          $inc: {\n            commentCount: -1,\n          },\n          $pull: {\n            comments: {\n              _id: commentId,\n            },\n          },\n        });\n        if (res.nModified !== 1) {\n          throw new Error();\n        }\n        return 'success';\n      } catch (e) {\n        throw new Error('DELETE_ERROR');\n      }\n    }\n\n    /**\n     * 点赞\n     * @param {String} circleId 内容id\n     * @return {*} 成功状态\n     */\n    async giveLike(circleId) {\n      const user = this.ctx.user;\n      user.likes.forEach(element => {\n        if (element.circleId === circleId) {\n          throw new Error('REPEAT_LIKE');\n        }\n      });\n      try {\n        await User.update({\n          _id: user._id,\n        }, {\n          $push: {\n            likes: circleId,\n          },\n        });\n        await Circle.update({\n          _id: circleId,\n        }, {\n          $push: {\n            likes: {\n              userId: user._id,\n              nickName: user.nickName,\n              headImage: user.headImage,\n              description: user.description,\n              certification: user.certification,\n            },\n          },\n          $inc: {\n            likeCount: 1,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('GIVE_LIKE_ERROR');\n      }\n    }\n\n    /**\n     * 取消赞\n     * @param {String} circleId 内容id\n     * @return {*} 成功状态\n     */\n    async cancelLike(circleId) {\n      const user = this.ctx.user;\n      try {\n        const res = await Circle.update({\n          _id: circleId,\n          'likes.userId': user._id,\n        }, {\n          $pull: {\n            likes: {\n              userId: user._id,\n            },\n          },\n          $inc: {\n            likeCount: -1,\n          },\n        });\n        if (!res.n) {\n          throw new Error();\n        }\n        await User.update({\n          _id: user._id,\n        }, {\n          $pull: {\n            likes: circleId,\n          },\n        });\n        return 'success';\n      } catch (e) {\n        throw new Error('CANCEL_LIKE_ERROR');\n      }\n    }\n\n    /**\n     * 查看关注的人动态\n     * @param {Number} last 最后一位时间\n     * @return {*} 关注的人动态\n     */\n    async getAttentionList(last) {\n      const user = this.ctx.user;\n      const followings = user.followings;\n      const followingIds = [];\n      followings.forEach(e => {\n        followingIds.push(e.userId);\n      });\n      try {\n        const res = await Circle.find({\n          userId: {\n            $in: followingIds,\n          },\n          time: { $lt: last },\n        }, 'userId nickName headImage likeCount content images commentCount time').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看动态\n     * @param {Number} last 最后一位时间\n     * @return {*} 动态\n     */\n    async getCircleList(last) {\n      try {\n        const res = await Circle.find({ time: { $lt: last } }, 'userId nickName time headImage content images likeCount commentCount').sort({\n          time: 'desc',\n        }).limit(PAGE_SIZE)\n          .exec();\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看评论\n     * @param {String} circleId 动态id\n     * @return {*} 评论\n     */\n    async getComment(circleId) {\n      try {\n        const res = await Circle.findById(circleId, 'comments').sort({\n          'comments.time': 'desc',\n        });\n        return res;\n      } catch (e) {\n        throw new Error('SOMETHING_ERROR');\n      }\n    }\n\n    /**\n     * 查看点赞列表\n     * @param {String} circleId 内容id\n     * @return {*} 点赞列表\n     */\n    async getLikeList(circleId) {\n      try {\n        const likeList = await Circle.findById(circleId, 'likes').sort({\n          'likes.time': 'desc',\n        });\n        return likeList;\n      } catch (e) {\n        throw new Error('GET_LIKE_LIST_ERROR');\n      }\n    }\n  }\n  return CircleService;\n};\n"]}